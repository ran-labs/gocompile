Path: /home/sanner/Coding/RAN/ran-app-native/src
/home/sanner/Coding/RAN/ran-app-native/src/actions/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/assets/socialIcons.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/AuthForms/AuthRedirect.svelte [<script lang="ts">
   export let href: string;
 
   /**
    * Login with OAUTH
    * OAUTH occurs in two steps:
    * 1. Redirect to the OAUTH provider's login page
    * 2. Redirect back to the app with a token (Stored in cookie's)
    */
   async function handleAuth() {
     try {
       const realHref: string = href;
       const loginURL = new URL(realHref);
       loginURL.searchParams.set("redirect_url", window.location.origin);
       const authRedirectUrl = await fetch(loginURL.toString(), {
         method: "GET",
         credentials: "include",
       });
       const urlString: string = await authRedirectUrl.text();
       window.location.replace(urlString);
     } catch (error) {
       console.log(error);
     }
   }
 </script>
 
 <div on:click={handleAuth}>
   <slot />
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/AuthForms/ForgotPasswordDialog.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/AuthForms/PostSignUpForm.svelte [<script lang="ts">
   import * as Dialog from "$lib/components/ui/dialog/index.js";
   import { enableCookies, enableJavaScript } from "$lib/utils/permissions/permissionsEnabled";
   import { Input, Label, TextArea } from "@components/ui/SignupForm";
   import { Button, LoadableButton } from "@components/ui/button";
   import { Checkbox } from "@components/ui/checkbox";
   import { AUTH_BACKEND_URL } from "@config/envconfig";
   import { IconCamera } from "@tabler/icons-svelte";
   import { onMount } from "svelte";
 
   let imageId = "";
   export let email: string;
 
   // show if user is in limbo mode
 
   export let userPfp: string; // initial user pfp; should load from the openapi stuff if using oauth, but if not, then it's just the default
   let pfpChanged = false;
 
   let showCameraButton = false;
 
   const basePfpStyles = "col-start-1 row-start-1 z-10 rounded-full h-36 w-36 object-cover bg-black"; // bg is black so that the user isn't allowed to have a transparent pfp
 
   $: pfpStyles = showCameraButton ? `${basePfpStyles} opacity-50` : basePfpStyles;
 
   let fileInput: HTMLInputElement;
   let shownPfpSrc: string = userPfp; // the actual thing that is shown
 
   // Text fields
   let username = "";
   export let fullName: string; // this could be autofilled from the openapi stuff
   let researchInterests = "";
 
   const allowedUsernameChars = /^[a-z0-9_]+$/;
 
   let usernameError = "";
 
   $: {
     // Only allow lowercase letters, numbers, and underscores
     username = username.toLowerCase();
 
     if (!allowedUsernameChars.test(username)) {
       // username failed the vibe check
       usernameError =
         "Username can only contain lowercase letters, numbers, and underscores. Your username is an @!";
     } else {
       usernameError = "";
     }
   }
 
   const MAX_FULL_NAME_LENGTH: number = 100;
 
   $: {
     if (fullName && fullName.length > MAX_FULL_NAME_LENGTH) {
       fullName = fullName.substring(0, MAX_FULL_NAME_LENGTH);
     }
   }
 
   // It's like a tweet!
   const MAX_RESEARCH_INTERESTS_LENGTH: number = 255;
 
   $: {
     if (researchInterests.length > MAX_RESEARCH_INTERESTS_LENGTH) {
       researchInterests = researchInterests.substring(0, MAX_RESEARCH_INTERESTS_LENGTH);
     }
   }
 
   // checkboxes
   let tosCocChecked = false;
   let mailingListChecked = false;
 
   $: createAccountIsDisabled = !(username.length > 0 && fullName.length > 0 && tosCocChecked);
 
   let createAccountIsLoading = false;
 
   function handleProfilePictureClick() {
     console.log("Opening file picker...");
     // Open the file picker
     fileInput.click();
   }
 
   async function onProfilePictureChange(e: Event) {
     pfpChanged = true;
     console.log("Profile picture changed");
     // Read the file and set the profile picture
 
     const file: Blob = (e.target as HTMLInputElement).files?.[0] as Blob;
     // check if the file is an image
     if (file) {
       const reader: FileReader = new FileReader();
       reader.onload = async (event) => {
         const selectedImageSrc = event.target?.result;
         shownPfpSrc = (selectedImageSrc ? selectedImageSrc : userPfp) as string;
 
         const formData = new FormData();
 
         // Verify if the
         if (!file.type.startsWith("image/")) {
           console.error("File is not an image");
           return;
         }
         formData.append("profile_picture", file);
         if (file.size > 100000000) {
           throw new Error("File size too large");
         }
 
         fetch("/~api/user/profile_upload", {
           method: "POST",
           body: formData,
           credentials: "include",
         })
           .then(async (res) => {
             console.log(res);
             imageId = await res.text();
             console.log(imageId);
           })
           .catch((error) => {
             console.error(`Failed to set profile picture: ${error}`);
           });
       };
       reader.readAsDataURL(file);
 
       // Upload the profile picture to the server
       // Re:set the selectedImageSrc to the URL of the uploaded image on the server
     }
   }
 
   async function onSubmitCreateAccount(e) {
     e.preventDefault();
     alert(window.location.origin);
     createAccountIsLoading = true;
 
     // The account is already created on the server, but is in limbo mode
     // Update the user's account to be completed (no more limbo mode)
     alert(
       `email: ${email}, username: ${username}, full_name: ${fullName}, research_interests: ${researchInterests}, mailing_list_checked: ${mailingListChecked}, profile_picture_url: ${imageId}`
     );
     const formData = new FormData();
     formData.append("username", username);
     formData.append("full_name", fullName);
     formData.append("research_interests", researchInterests);
     formData.append("mailing_list_checked", mailingListChecked);
     formData.append("profile_picture_url", imageId || "");
     try {
       const response = await fetch(`${AUTH_BACKEND_URL}/user/complete_account`, {
         method: "POST",
         credentials: "include",
         body: formData,
       });
       if (!response.ok) {
         throw new Error(`HTTPS error status: ${response.status}`);
       }
     } catch (error) {
       console.error(error);
       window.location.replace("/postsignup");
     }
     window.location.replace("/");
   }
 </script>
 
 <Dialog.Root open={true} closeOnEscape={false} closeOnOutsideClick={false}>
   <Dialog.Content showCloseButton={false} class="form-box-shadow mx-auto shadow">
     <!-- TITLE -->
     <Dialog.Title>
       <h1 class="text-center text-2xl font-bold text-neutral-200">Complete your profile</h1>
     </Dialog.Title>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/AuthForms/SignInDialog.svelte [<script lang="ts">
   import { SITE } from "@config/siteconfig";
 
   import * as Dialog from "$lib/components/ui/dialog/index.js";
   import { EmailInput, Input, Label } from "@components/ui/SignupForm";
   //import { cn } from "$lib/utils";
   import { IconBrandGithub, IconBrandGoogle, IconBrandGrindr } from "@tabler/icons-svelte";
 
   import { AUTH_BACKEND_URL, BACKEND_URL } from "@config/envconfig";
   import AuthRedirect from "./AuthRedirect.svelte";
 
   import hfIconBlackAndWhite from "@assets/images/external-brands/hf-icon-blackandwhite.png";
   import orcidIcon from "@assets/images/external-brands/orcid.svg";
   import ranIconBlackTransparent from "@assets/images/ran/ran-icon-black-transparent.png";
 
   import { enableCookies, enableJavaScript } from "$lib/utils/permissions/permissionsEnabled";
   import { onMount } from "svelte";
 
   export let showCloseButton = true;
 
   /**
    * METHODS
    * email_password
    * google
    * apple
    * github
    * orcid
    * huggingface
    */
   export let usernameEmailPasswordRoute = `${AUTH_BACKEND_URL}/auth/username/login`;
   export let googleRoute = `${AUTH_BACKEND_URL}/auth/google/login`;
   export let githubRoute = `${AUTH_BACKEND_URL}/auth/github/login`;
   export let huggingfaceRoute = `${AUTH_BACKEND_URL}/auth/huggingface/login`;
   export let orcidRoute = `${AUTH_BACKEND_URL}/auth/orcid/login`;
 
   const username_email_password_href_prefix: string = usernameEmailPasswordRoute;
 
   const google_href: string = googleRoute;
   const github_href: string = githubRoute;
   const huggingface_href: string = huggingfaceRoute;
   const orcid_href: string = orcidRoute;
 
   // Bind this value to what the user typed
   let username_email = "";
   let password = "";
 
   // $: username_email_password_href =
   //   username_email_password_href_prefix +
   //   `&username_email=${encodeURIComponent(username_email)}`;
 
   const handleSubmitUsernamePassword = async (e: SubmitEvent) => {
     e.preventDefault();
     if (!username_email || !password) {
       return;
     }
 
     const formData = new FormData();
 
     try {
       const response = await fetch(
         `${usernameEmailPasswordRoute}?originURL=${window.location.origin}`,
         {
           method: "POST",
           body: JSON.stringify({
             username: username_email,
             password: password,
           }),
           credentials: "include",
           headers: {
             "Content-Type": "application/json",
           },
         }
       );
       if (response.status === 200) {
         window.location.replace("/");
       }
     } catch (error) {
       console.log(error);
       alert("Error logging in with username and password");
       console.error("Error logging in with username and password");
       //window.replace("/postsignup");
     }
   };
 </script>
 
 <Dialog.Content
   class="form-box-shadow dark mx-auto w-full max-w-md rounded-none border border-gray-800 bg-neutral-950 p-4 shadow md:rounded-2xl md:p-8"
   {showCloseButton}
   closeButtonClasses="text-neutral-400"
 >
   <Dialog.Title>
     <h2 class="text-center text-xl font-bold text-neutral-200">
       Log in to {SITE.title}
     </h2>
   </Dialog.Title>
 
   <img
     id="ran-logo"
     src={ranIconBlackTransparent.src}
     alt={SITE.title}
     class="mx-auto h-16 invert"
   />
 
   <div class="my-8">
     <form class={"mb-4 flex w-full flex-col space-y-2"} on:submit={handleSubmitUsernamePassword}>
       <!-- USERNAME / EMAIL -->
       <Label htmlFor="username_email">Username or Email Address</Label>
       <Input
         id="username_email"
         placeholder="username or email@example.com"
         className="text-md"
         bind:value={username_email}
         tabindex="-1"
       />
 
       <!-- PASSWORD -->
       <Label htmlFor="password">Password</Label>
       <Input
         className="text-3xl"
         id="password"
         type="password"
         placeholder="•••••••••"
         bind:value={password}
         tabindex="-1"
       />
 
       <!-- Forgot Password -->
       <a
         href="/account/forgot-password"
         target="_blank"
         class="text-sm text-gray-400 hover:text-ran_orange hover:underline"
       >
         Forgot Password?
       </a>
       <button
         class="group/btn relative h-10 w-full rounded-md bg-zinc-800 bg-gradient-to-br from-zinc-900 to-zinc-900 text-center font-medium text-white shadow-[0px_1px_0px_0px_var(--zinc-800)_inset,0px_-1px_0px_0px_var(--zinc-800)_inset]"
         type="submit"
       >
         <span class="text-center">Sign in with Email &rarr;</span>
         <span
           class="duration-400 absolute inset-x-0 -bottom-px block h-px w-full bg-gradient-to-r from-transparent via-ran_orange to-transparent opacity-0 transition group-hover/btn:opacity-100"
         />
         <span
           class="duration-400 absolute inset-x-10 -bottom-px mx-auto block h-px w-1/2 bg-gradient-to-r from-transparent via-yellow-500 to-transparent opacity-0 blur-sm transition group-hover/btn:opacity-100"
         />
       </button>
     </form>
 
     <div>
       <div
         class="my-8 h-[1px] w-full bg-gradient-to-r from-transparent via-neutral-300 to-transparent dark:via-neutral-700"
       />
 
       <div class="flex flex-col space-y-4">
         <!-- GOOGLE -->
         <AuthRedirect href={google_href}>
           <button
             class=" group/btn relative flex h-10 w-full items-center justify-start space-x-2 rounded-md bg-gray-50 px-4 font-medium text-black shadow-input dark:bg-zinc-900 dark:shadow-[0px_0px_1px_1px_var(--neutral-800)]"
             type="button"
           >
             <IconBrandGoogle class="h-4 w-4 text-neutral-800 dark:text-neutral-300" />
             <span class="text-sm text-neutral-700 dark:text-neutral-300"> Google </span>
             <span
               class="duration-400 absolute inset-x-0 -bottom-px block h-px w-full bg-gradient-to-r from-transparent via-ran_orange to-transparent opacity-0 transition group-hover/btn:opacity-100"
             />
             <span
               class="duration-400 absolute inset-x-10 -bottom-px mx-auto block h-px w-1/2 bg-gradient-to-r from-transparent via-yellow-500 to-transparent opacity-0 blur-sm transition group-hover/btn:opacity-100"
             />
           </button>
         </AuthRedirect>
 
         <!-- GITHUB -->
         <AuthRedirect href={github_href}>
           <button
             class=" group/btn relative flex h-10 w-full items-center justify-start space-x-2 rounded-md bg-gray-50 px-4 font-medium text-black shadow-input dark:bg-zinc-900 dark:shadow-[0px_0px_1px_1px_var(--neutral-800)]"
             type="button"
           >
             <IconBrandGithub class="h-4 w-4 text-neutral-800 dark:text-neutral-300" />
             <span class="text-sm text-neutral-700 dark:text-neutral-300"> GitHub </span>
             <span
               class="duration-400 absolute inset-x-0 -bottom-px block h-px w-full bg-gradient-to-r from-transparent via-ran_orange to-transparent opacity-0 transition group-hover/btn:opacity-100"
             />
             <span
               class="duration-400 absolute inset-x-10 -bottom-px mx-auto block h-px w-1/2 bg-gradient-to-r from-transparent via-yellow-500 to-transparent opacity-0 blur-sm transition group-hover/btn:opacity-100"
             />
           </button>
         </AuthRedirect>
 
         <!-- ORCID -->
         <AuthRedirect href={orcid_href}>
           <button
             class=" group/btn relative flex h-10 w-full items-center justify-start space-x-2 rounded-md bg-gray-50 px-4 font-medium text-black shadow-input dark:bg-zinc-900 dark:shadow-[0px_0px_1px_1px_var(--neutral-800)]"
             type="button"
           >
             <img
               src={orcidIcon.src}
               alt="ORCID"
               class="h-4 w-4 text-neutral-700 dark:text-neutral-300"
             />
             <span class="text-sm text-neutral-700 dark:text-neutral-300"> ORCID </span>
             <span
               class="duration-400 absolute inset-x-0 -bottom-px block h-px w-full bg-gradient-to-r from-transparent via-ran_orange to-transparent opacity-0 transition group-hover/btn:opacity-100"
             />
             <span
               class="duration-400 absolute inset-x-10 -bottom-px mx-auto block h-px w-1/2 bg-gradient-to-r from-transparent via-yellow-500 to-transparent opacity-0 blur-sm transition group-hover/btn:opacity-100"
             />
           </button>
         </AuthRedirect>
 
         <!-- HUGGINGFACE -->
         <AuthRedirect href={huggingface_href}>
           <button
             class=" group/btn relative flex h-10 w-full items-center justify-start space-x-2 rounded-md bg-gray-50 px-4 font-medium text-black shadow-input dark:bg-zinc-900 dark:shadow-[0px_0px_1px_1px_var(--neutral-800)]"
             type="button"
           >
             <img
               src={hfIconBlackAndWhite.src}
               alt="HuggingFace"
               class="h-4 w-4 text-neutral-700 dark:text-neutral-300"
             />
             <span class="text-sm text-neutral-700 dark:text-neutral-300"> HuggingFace </span>
             <span
               class="duration-400 absolute inset-x-0 -bottom-px block h-px w-full bg-gradient-to-r from-transparent via-ran_orange to-transparent opacity-0 transition group-hover/btn:opacity-100"
             />
             <span
               class="duration-400 absolute inset-x-10 -bottom-px mx-auto block h-px w-1/2 bg-gradient-to-r from-transparent via-yellow-500 to-transparent opacity-0 blur-sm transition group-hover/btn:opacity-100"
             />
           </button>
         </AuthRedirect>
 
         <!-- joke buttons down here -->
 
         <!-- GRINDR -->
         <!-- <button
           class=" group/btn relative flex h-10 w-full items-center justify-start space-x-2 rounded-md bg-gray-50 px-4 font-medium text-black shadow-input dark:bg-zinc-900 dark:shadow-[0px_0px_1px_1px_var(--neutral-800)]"
           type="submit"
         >
           <IconBrandGrindr
             class="h-4 w-4 text-neutral-800 dark:text-neutral-300"
           />
           <span class="text-sm text-neutral-700 dark:text-neutral-300">
             Grindr (coming soon)
           </span>
           <span
             class="absolute inset-x-0 -bottom-px block h-px w-full bg-gradient-to-r from-transparent via-ran_orange to-transparent opacity-0 transition duration-400 group-hover/btn:opacity-100"
           />
           <span
             class="absolute inset-x-10 -bottom-px mx-auto block h-px w-1/2 bg-gradient-to-r from-transparent via-yellow-500 to-transparent opacity-0 blur-sm transition duration-400 group-hover/btn:opacity-100"
           />
         </button> -->
 
         <slot />
       </div>
     </div>
   </div>
 </Dialog.Content>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/AuthForms/SignInSignUpDialog.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/AuthForms/SignUpDialog.svelte [<script lang="ts">
   import { SITE } from "@config/siteconfig";
 
   import * as Dialog from "$lib/components/ui/dialog/index.js";
   import { EmailInput, Input, Label } from "@components/ui/SignupForm";
   //import { cn } from "$lib/utils";
   import {
     IconBrandAppleFilled,
     IconBrandGithub,
     IconBrandGoogle,
     IconBrandGrindr,
   } from "@tabler/icons-svelte";
 
   import hfIconBlackAndWhite from "@assets/images/external-brands/hf-icon-blackandwhite.png";
   import orcidIcon from "@assets/images/external-brands/orcid.svg";
   import ranIconBlackTransparent from "@assets/images/ran/ran-icon-black-transparent.png";
   import AuthRedirect from "./AuthRedirect.svelte";
 
   import { AUTH_BACKEND_URL } from "@config/envconfig";
 
   export let showCloseButton = true;
 
   /**
    * METHODS
    * email_password
    * google
    * apple
    * github
    * orcid
    * huggingface
    */
 
   export let usernameEmailPasswordRoute = `${AUTH_BACKEND_URL}/auth/username/signup`;
   export let googleRoute = `${AUTH_BACKEND_URL}/auth/google/login`;
   export let githubRoute = `${AUTH_BACKEND_URL}/auth/github/login`;
   export let orcidRoute = `${AUTH_BACKEND_URL}/auth/orcid/login`;
   export let huggingfaceRoute = `${AUTH_BACKEND_URL}/auth/huggingface/login`;
 
   const google_href: string = googleRoute;
   const github_href: string = githubRoute;
   const orcid_href: string = orcidRoute;
   const huggingface_href: string = huggingfaceRoute;
 
   // Bind this value to what the user typed
   let username = "";
   let email = "";
   let password = "";
   let passwordConfirmation = "";
 
   const handleSubmit = async (e: SubmitEvent) => {
     e.preventDefault();
 
     if (password !== passwordConfirmation) {
       console.error("Passwords do not match");
       password = "";
       passwordConfirmation = "";
       return;
     }
 
     if (!username || !email || !password) {
       console.error("Username, Email or password is missing");
       return;
     }
 
     // const formData = new FormData();
     // formData.append("username", username);
     // formData.append("password", password);
 
     // TODO: get this off the local endpoint
     try {
       password = "";
       passwordConfirmation = "";
       username = "";
       email = "";
       const localEndpoint = "https://localhost:8787";
       const response = await fetch(`${localEndpoint}?originURL=${window.location.origin}`, {
         method: "POST",
         credentials: "include",
         body: JSON.stringify({
           username,
           email,
           password,
         }),
         headers: {
           "Content-Type": "application/json",
         },
       });
 
       if (response.status !== 200) {
         console.error("Error signing up with email and password");
         window.location.replace("/signup");
       }
     } catch (error) {
       console.error("Error signing up with email and password", error);
       window.location.replace("/signup");
       return false;
     }
     window.location.replace("/postsignup");
   };
 </script>
 
 <Dialog.Content
   class="form-box-shadow dark mx-auto w-full max-w-md rounded-none border border-gray-800 bg-neutral-950 p-4 shadow md:rounded-2xl md:p-8"
   {showCloseButton}
   closeButtonClasses="text-neutral-400"
 >
   <Dialog.Title>
     <h2 class="text-center text-xl font-bold text-neutral-200">Create an Account</h2>
   </Dialog.Title>
 
   <img
     id="ran-logo"
     src={ranIconBlackTransparent.src}
     alt={SITE.title}
     class="mx-auto h-16 invert"
   />
 
   <div class="my-8" on:submit={handleSubmit}>
     <form class={"mb-4 flex w-full flex-col space-y-2"} on:submit={handleSubmit}>
       <Label htmlFor="username">Username</Label>
       <Input
         className="text-md"
         id="username"
         placeholder="username"
         bind:value={username}
         tabindex="-1"
       />
       <!-- EMAIL -->
       <Label htmlFor="email">Email Address</Label>
       <EmailInput
         id="email"
         placeholder="email@example.com"
         className="text-md"
         bind:value={email}
         tabindex="-1"
       />
 
       <!-- PASSWORD -->
       <Label htmlFor="password">Password</Label>
       <Input
         className="text-3xl"
         id="password"
         type="password"
         placeholder="•••••••••"
         bind:value={password}
         tabindex="-1"
       />
 
       <Label htmlFor="passwordConfirmation">Confirm Password</Label>
       <Input
         className="text-3xl"
         id="passwordConfirmation"
         type="password"
         placeholder="•••••••••"
         bind:value={passwordConfirmation}
         tabindex="-1"
       />
 
       <br />
       <button
         class="group/btn relative h-10 w-full rounded-md bg-zinc-800 bg-gradient-to-br from-zinc-900 to-zinc-900 text-center font-medium text-white shadow-[0px_1px_0px_0px_var(--zinc-800)_inset,0px_-1px_0px_0px_var(--zinc-800)_inset]"
         type="submit"
       >
         <span class="text-center">Sign up with Email &rarr;</span>
         <span
           class="duration-400 absolute inset-x-0 -bottom-px block h-px w-full bg-gradient-to-r from-transparent via-ran_orange to-transparent opacity-0 transition group-hover/btn:opacity-100"
         />
         <span
           class="duration-400 absolute inset-x-10 -bottom-px mx-auto block h-px w-1/2 bg-gradient-to-r from-transparent via-yellow-500 to-transparent opacity-0 blur-sm transition group-hover/btn:opacity-100"
         />
       </button>
     </form>
 
     <div>
       <div
         class="my-8 h-[1px] w-full bg-gradient-to-r from-transparent via-neutral-300 to-transparent dark:via-neutral-700"
       />
       <div class="flex flex-col space-y-4">
         <!-- GOOGLE -->
         <AuthRedirect href={google_href}>
           <button
             class=" group/btn relative flex h-10 w-full items-center justify-start space-x-2 rounded-md bg-gray-50 px-4 font-medium text-black shadow-input dark:bg-zinc-900 dark:shadow-[0px_0px_1px_1px_var(--neutral-800)]"
             type="button"
           >
             <IconBrandGoogle class="h-4 w-4 text-neutral-800 dark:text-neutral-300" />
             <span class="text-sm text-neutral-700 dark:text-neutral-300"> Google </span>
             <span
               class="duration-400 absolute inset-x-0 -bottom-px block h-px w-full bg-gradient-to-r from-transparent via-ran_orange to-transparent opacity-0 transition group-hover/btn:opacity-100"
             />
             <span
               class="duration-400 absolute inset-x-10 -bottom-px mx-auto block h-px w-1/2 bg-gradient-to-r from-transparent via-yellow-500 to-transparent opacity-0 blur-sm transition group-hover/btn:opacity-100"
             />
           </button>
         </AuthRedirect>
 
         <!-- GITHUB -->
         <AuthRedirect href={github_href}>
           <button
             class=" group/btn relative flex h-10 w-full items-center justify-start space-x-2 rounded-md bg-gray-50 px-4 font-medium text-black shadow-input dark:bg-zinc-900 dark:shadow-[0px_0px_1px_1px_var(--neutral-800)]"
             type="button"
           >
             <IconBrandGithub class="h-4 w-4 text-neutral-800 dark:text-neutral-300" />
             <span class="text-sm text-neutral-700 dark:text-neutral-300"> GitHub </span>
             <span
               class="duration-400 absolute inset-x-0 -bottom-px block h-px w-full bg-gradient-to-r from-transparent via-ran_orange to-transparent opacity-0 transition group-hover/btn:opacity-100"
             />
             <span
               class="duration-400 absolute inset-x-10 -bottom-px mx-auto block h-px w-1/2 bg-gradient-to-r from-transparent via-yellow-500 to-transparent opacity-0 blur-sm transition group-hover/btn:opacity-100"
             />
           </button>
         </AuthRedirect>
 
         <!-- ORCID -->
         <AuthRedirect href={orcid_href}>
           <button
             class=" group/btn relative flex h-10 w-full items-center justify-start space-x-2 rounded-md bg-gray-50 px-4 font-medium text-black shadow-input dark:bg-zinc-900 dark:shadow-[0px_0px_1px_1px_var(--neutral-800)]"
             type="button"
           >
             <img
               src={orcidIcon.src}
               alt="ORCID"
               class="h-4 w-4 text-neutral-700 dark:text-neutral-300"
             />
             <span class="text-sm text-neutral-700 dark:text-neutral-300"> ORCID </span>
             <span
               class="duration-400 absolute inset-x-0 -bottom-px block h-px w-full bg-gradient-to-r from-transparent via-ran_orange to-transparent opacity-0 transition group-hover/btn:opacity-100"
             />
             <span
               class="duration-400 absolute inset-x-10 -bottom-px mx-auto block h-px w-1/2 bg-gradient-to-r from-transparent via-yellow-500 to-transparent opacity-0 blur-sm transition group-hover/btn:opacity-100"
             />
           </button>
         </AuthRedirect>
 
         <!-- HUGGINGFACE -->
         <AuthRedirect href={huggingface_href}>
           <button
             class=" group/btn relative flex h-10 w-full items-center justify-start space-x-2 rounded-md bg-gray-50 px-4 font-medium text-black shadow-input dark:bg-zinc-900 dark:shadow-[0px_0px_1px_1px_var(--neutral-800)]"
             type="button"
           >
             <img
               src={hfIconBlackAndWhite.src}
               alt="HuggingFace"
               class="h-4 w-4 text-neutral-700 dark:text-neutral-300"
             />
             <span class="text-sm text-neutral-700 dark:text-neutral-300"> HuggingFace </span>
             <span
               class="duration-400 absolute inset-x-0 -bottom-px block h-px w-full bg-gradient-to-r from-transparent via-ran_orange to-transparent opacity-0 transition group-hover/btn:opacity-100"
             />
             <span
               class="duration-400 absolute inset-x-10 -bottom-px mx-auto block h-px w-1/2 bg-gradient-to-r from-transparent via-yellow-500 to-transparent opacity-0 blur-sm transition group-hover/btn:opacity-100"
             />
           </button>
         </AuthRedirect>
 
         <!-- joke buttons down here -->
 
         <!-- GRINDR -->
         <!-- <button
           class=" group/btn relative flex h-10 w-full items-center justify-start space-x-2 rounded-md bg-gray-50 px-4 font-medium text-black shadow-input dark:bg-zinc-900 dark:shadow-[0px_0px_1px_1px_var(--neutral-800)]"
           type="submit"
         >
           <IconBrandGrindr
             class="h-4 w-4 text-neutral-800 dark:text-neutral-300"
           />
           <span class="text-sm text-neutral-700 dark:text-neutral-300">
             Grindr (coming soon)
           </span>
           <span
             class="absolute inset-x-0 -bottom-px block h-px w-full bg-gradient-to-r from-transparent via-ran_orange to-transparent opacity-0 transition duration-400 group-hover/btn:opacity-100"
           />
           <span
             class="absolute inset-x-10 -bottom-px mx-auto block h-px w-1/2 bg-gradient-to-r from-transparent via-yellow-500 to-transparent opacity-0 blur-sm transition duration-400 group-hover/btn:opacity-100"
           />
         </button> -->
 
         <slot />
       </div>
     </div>
   </div>
 </Dialog.Content>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/AuthForms/popup/LoginPopup.svelte [<script lang="ts">
   import SignInSignUpDialog from "@components/AuthForms/SignInSignUpDialog.svelte";
   import * as Dialog from "@components/ui/dialog/index.js";
   import { isWindowingBlocked } from "@data/client/stores";
   import { closablePopup, defaultAuthMode, isPopupOpen } from "./stores";
 
   let authMode: "signIn" | "signUp" = defaultAuthMode.get();
 </script>
 
 <!-- SIGN IN / SIGN UP -->
 <Dialog.Root
   onOpenChange={(open) => {
     authMode = defaultAuthMode.get();
     isWindowingBlocked.set(open);
   }}
   open={$isPopupOpen}
   closeOnEscape={$closablePopup}
   closeOnOutsideClick={$closablePopup}
 >
   <SignInSignUpDialog bind:mode={authMode} showCloseButton={$closablePopup} />
 </Dialog.Root>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/AuthForms/popup/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/AuthForms/popup/stores.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/Blog/AuthorCardContent.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/Blog/BlogPostPreview.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/Blog/BlogPosts.svelte [<script lang="ts">
   import { GradientCard, Icon } from "@components/ui/GradientCard";
   import { COLOR_THEME } from "@data/client/theme";
   import type { FullCollectionEntry } from "@types/contentCollections";
   import { onMount } from "svelte";
   import BlogPostPreview from "./BlogPostPreview.svelte";
 
   // Order matters here
   export let posts: FullCollectionEntry<"blog">[];
   let bgColor: string;
   const pointerColor: string = "234, 88, 12"; // rgb
 
   onMount(() => {
     const updateBgColor = (theme: string) => {
       bgColor = COLOR_THEME.getThemeColorValue(theme);
     };
 
     COLOR_THEME.getAtom().subscribe(updateBgColor);
 
     // Call it for the first time
     updateBgColor(COLOR_THEME.get());
   });
 </script>
 
 <div class="mx-[25vw] dark">
   <GradientCard className="dark">
     <div class="z-30 dark">
       {#each posts as post}
         <BlogPostPreview {post} />
       {/each}
     </div>
   </GradientCard>
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Blog/BlogView/CTA/_components/EmailInput.svelte [<script lang="ts">
   import { Input } from "@components/ui/input";
   import { isValidEmail } from "@utils/formatting";
   import { emailInput, subscribeClicked, subscribedEmailError } from "../stores";
 
   function handleSubmit() {
     if (!isValidEmail(emailInput.get())) {
       subscribedEmailError.set("Please enter a valid email address");
       return;
     }
 
     subscribedEmailError.set("");
     subscribeClicked.set(true);
   }
 </script>
 
 <Input
   class="text-md min-w-fit flex-1"
   type="email"
   placeholder="example@someone.com"
   bind:value={$emailInput}
   on:input={() => {
     // Reset subscribed state so that the user can subscribe again with different emails
     // Will not auto-unsubscribe if they are not logged in, which is the prerequisite to this component showing up in the first place
     subscribeClicked.set(false);
   }}
   on:keydown={(e) => {
     if (e.key === "Enter") {
       e.preventDefault();
       handleSubmit();
     }
   }}
 />
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Blog/BlogView/CTA/_components/Subscribe.tsx []
/home/sanner/Coding/RAN/ran-app-native/src/components/Blog/BlogView/CTA/_components/SubscribedNotify.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/Blog/BlogView/CTA/stores.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/Blog/BlogView/PostMetadata.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/Blog/MovablePostCard.svelte [<script lang="ts">
   import {
     Motion,
     type MotionValue,
     useSpring,
     useTransform,
     useViewportScroll,
   } from "svelte-motion";
 
   export let translate: MotionValue<number>;
 </script>
 
 <Motion
   let:motion
   style={{
     x: translate,
   }}
   whileHover={{
     y: -20,
   }}
 >
   <div use:motion class="group/product relative w-[30rem] flex-shrink-0">
     <slot />
   </div>
 </Motion>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Blog/ParallaxMotion.svelte [<script lang="ts">
   import {
     Motion,
     useSpring,
     useTransform,
     useViewportScroll,
   } from "svelte-motion";
   import PostsView from "./PostsView.svelte";
 
   export let newsPosts = []; // News
   //export let regularPosts = []; // Posts
 
   let ref: HTMLDivElement | null = null;
 
   const { scrollYProgress } = useViewportScroll();
 
   const springConfig = { stiffness: 300, damping: 30, bounce: 100 };
 
   /*const translateX_First = useSpring(
     useTransform(scrollYProgress, [0, 1], [0, 1000]),
     springConfig
   );
   const translateX = useSpring(
     useTransform(scrollYProgress, [0, 1], [0, 1000]),
     springConfig
   );
   const translateXReverse = useSpring(
     useTransform(scrollYProgress, [0, 1], [0, -1000]),
     springConfig
   );*/
   const rotateX = useSpring(
     useTransform(scrollYProgress, [0, 0.2], [15, 0]),
     springConfig
   );
   const opacity = useSpring(
     useTransform(scrollYProgress, [0, 0.2], [0.2, 1]),
     springConfig
   );
   const rotateZ = useSpring(
     useTransform(scrollYProgress, [0, 0.2], [20, 0]),
     springConfig
   );
   const translateY = useSpring(
     useTransform(scrollYProgress, [0, 0.2], [-700, 500]),
     springConfig
   );
 </script>
 
 <div
   bind:this={ref}
   class="relative flex h-[300vh] flex-col self-auto overflow-hidden py-4 antialiased [perspective:1000px] [transform-style:preserve-3d] z-0"
 >
   <slot name="header" />
 
   <Motion
     let:motion
     style={{
       rotateX,
       rotateZ,
       translateY,
       opacity,
     }}
   >
     <div use:motion>
       <p class="text-center font-bold text-5xl font-inter z-20">News</p>
 
       <div class="section mx-auto">
         <PostsView posts={newsPosts} />
       </div>
 
       <!--<Motion let:motion>
         <div use:motion class="mb-16 move-forward"></div>
       </Motion>-->
 
       <p class="text-center font-bold text-5xl font-inter z-20 mt-6 mb-6">
         Posts
       </p>
       <Motion let:motion>
         <div use:motion class="move-forward">
           <div class="section mx-auto">
             <slot name="blog-posts" />
           </div>
         </div>
       </Motion>
     </div>
   </Motion>
 </div>
 
 <style>
   .section-title {
     @apply z-50 mb-6 text-center font-inter text-5xl font-bold;
   }
 
   .section {
     @apply p-0;
   }
 
   .move-forward {
     @apply flex flex-row-reverse space-x-20 space-x-reverse;
   }
 
   .move-reverse {
     @apply flex flex-row space-x-20;
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Blog/PostsView.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/Blog/ThreeDPostCard.svelte [<script lang="ts">
   //import { onMount } from "svelte";
   import CardBody from "@components/ui/ThreeDCardEffect/CardBody.svelte";
   import CardContainer from "@components/ui/ThreeDCardEffect/CardContainer.svelte";
   import CardItem from "@components/ui/ThreeDCardEffect/CardItem.svelte";
 
   import type { FullCollectionEntry } from "@types/contentCollections";
 
   export let post: FullCollectionEntry<"blog">;
 
   export let href: string;
 
   let includeThumbnail: boolean = post.data.thumbnailPath && post.data.thumbnailPath.length > 0;
 
   let isMouseEntered = false;
 
   const cardClasses = {
     backgrounds: "dark:bg-black",
     borders: "border dark:border-white/[0.2] rounded-xl",
     shadows:
       "hover:shadow-2xl dark:hover:shadow-ran_orange_light/[0.25] hover:shadow-ran_orange_light/[0.25]",
   };
 
   const allCardClasses: string = `${cardClasses.backgrounds} ${cardClasses.borders} ${cardClasses.shadows}`;
 
   // CardBody: px-6 pt-4 pb-2 relative
 </script>
 
 <CardContainer bind:isMouseEntered className="max-h-[25vh] dark">
   <a {href}>
     <CardBody className={"group/card px-6 pt-4 pb-2 relative w-[19vw] dark" + " " + allCardClasses}>
       <!-- TITLE -->
       <CardItem
         {isMouseEntered}
         translateZ="10"
         className="text-2xl font-bold text-wrap dark:text-white"
       >
         {post.data.title}
       </CardItem>
 
       <!-- Date -->
       <CardItem
         {isMouseEntered}
         translateZ="10"
         className="text-muted-foreground text-sm font-bold text-wrap"
       >
         {post.data.pubDatetime.toLocaleDateString()}
       </CardItem>
 
       <!-- [Thumbnail] -->
       {#if includeThumbnail}
         <CardItem {isMouseEntered} translateZ="20" className="">
           <img
             src={post.data.thumbnailPath}
             class="mx-auto max-h-[20vh] w-full rounded-xl object-cover group-hover/card:shadow-xl"
             alt="blog post thumbnail"
           />
         </CardItem>
       {/if}
 
       <!-- Description -->
       <CardItem {isMouseEntered} translateZ="20" className="">
         <textarea
           readonly
           tabindex="-1"
           class="text-md max-h-[8vh] w-full resize-none overflow-y-auto text-wrap bg-transparent indent-0 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-black/10 scrollbar-track-rounded-full scrollbar-thumb-rounded-full scrollbar-w-[1px] hover:scrollbar-thumb-black/20 dark:text-white dark:scrollbar-thumb-white/10 dark:hover:scrollbar-thumb-white/20"
           >{post.data.description}</textarea
         >
       </CardItem>
 
       <!-- Read blog post option -->
       <div class="flex items-center justify-end">
         <CardItem
           {isMouseEntered}
           translateZ={5}
           className="rounded-xl text-md font-normal dark:text-white"
         >
           <span class={`${isMouseEntered ? "font-bold text-ran_orange" : ""}`}>Read →</span>
         </CardItem>
       </div>
     </CardBody>
   </a>
 </CardContainer>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Chatbot/ButtonScrollToBottom.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/Chatbot/ChatMessage.svelte [<script lang="ts">
   import type { Message } from "$lib/types/chat";
   //import { IconOpenAI, IconUser } from "$lib/components/ui/icons";
   import { cn } from "$lib/utils";
   import ChatMessageActions from "./ChatMessageActions.svelte";
 
   export let message: Message;
 </script>
 
 <div
   class={cn("group relative mb-4 flex items-start md:-ml-12")}
   {...$$restProps}
 >
   <div
     class={cn(
       "flex h-8 w-8 shrink-0 select-none items-center justify-center rounded-full border p-[1px]",
       message.role === "user"
         ? "text-primary-foreground"
         : "text-primary-foreground"
     )}
   >
     <img
       src={message.pfpSource}
       alt="identifier image"
       class="rounded-full dark:invert"
     />
   </div>
   <div
     class="ml-4 flex-1 space-y-2 overflow-hidden px-1 prose dark:prose-invert"
   >
     {#if message.content.length > 0}
       {message.content}
     {:else}
       <!-- LOADING ANIMATION IF NOTHING YET -->
       <div class="loader"></div>
     {/if}
   </div>
   <ChatMessageActions {message} />
 </div>
 
 <style>
   .loader {
     width: 15px;
     aspect-ratio: 1;
     border-radius: 50%;
     animation: l5 1s infinite linear alternate;
   }
   @keyframes l5 {
     0% {
       box-shadow:
         20px 0 #000,
         -20px 0 #0002;
       background: #000;
     }
     33% {
       box-shadow:
         20px 0 #000,
         -20px 0 #0002;
       background: #0002;
     }
     66% {
       box-shadow:
         20px 0 #0002,
         -20px 0 #000;
       background: #0002;
     }
     100% {
       box-shadow:
         20px 0 #0002,
         -20px 0 #000;
       background: #000;
     }
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Chatbot/ChatMessageActions.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/Chatbot/ChatPanel.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/Chatbot/renderers/Code.svelte [<script>
   export let lang;
   export let text;
   const copyToClipboard = async () => {
     try {
       await navigator.clipboard.writeText(text);
     } catch (error) {
       console.error("Error copying text: ", error);
     }
   };
 </script>
 
 <pre class="{lang} p-5 pb-0 md:mx-2 mx-0 mt-3 mb-6" style="position:relative">
 <code>{text}</code>
 <button on:click={copyToClipboard}>Copy to Clipboard</button>
 </pre>
 
 <!-- <p class="text-red-400">{lang}</p> -->
 <style>
   pre {
     background-color: rgba(0, 0, 0, 0.3);
     border-radius: 10px;
     box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);
 
     opacity: 0;
     animation: fade-in 0.5s ease-in-out forwards;
   }
 
   pre:hover button {
     opacity: 1;
   }
 
   code {
     font-weight: bold;
     overflow-wrap: break-word;
     white-space: pre-wrap;
   }
 
   button {
     position: absolute;
     opacity: 0;
     top: 0;
     right: 0;
     margin: 10px;
     transition: all 0.1s ease-in-out;
   }
 
   button:hover {
     text-shadow:
       0 0 10px rgba(255, 255, 255, 0.5),
       0 0 20px rgba(255, 255, 255, 0.5),
       0 0 30px rgba(255, 255, 255, 0.3),
       0 0 40px rgba(255, 255, 255, 0.5);
   }
 
   @keyframes fade-in {
     from {
       opacity: 0;
     }
     to {
       opacity: 1;
     }
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Chatbot/renderers/CodeSpan.svelte [<script>
   export let raw;
 </script>
 
 <code>{raw.replace(/`/g, "")}</code>
 
 <style>
   code {
     font-weight: bold;
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Chatbot/renderers/Em.svelte [<em><slot /></em>
 
 <style>
   em {
     font-weight: bold;
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Chatbot/renderers/Html.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/Chatbot/renderers/ListItem.svelte [<li><slot /></li>
 
 <style>
   li {
     padding-bottom: 0.5rem;
     padding-left: 0.5rem;
     list-style-type: decimal;
   }
   li::marker {
     color: rgba(255, 255, 255, 0.4);
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Chatbot/renderers/ListRenderer.svelte [<script>
   export let ordered;
   export let start;
 </script>
 
 {#if ordered}
   <ol {start}><slot /></ol>
 {:else}
   <ul><slot /></ul>
 {/if}
 
 <style>
   ol,
   ul {
     padding-left: 1rem;
     padding-right: 1rem;
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Chatbot/renderers/Paragraph.svelte [<p><slot /></p>
 
 <style>
   p {
     padding-bottom: 1rem;
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Footer/_components/Legal.svelte [<script lang="ts">
   import * as Select from "$lib/components/ui/select/index.js";
   import type { Item } from "./types";
 
   export let items: Item[] = [];
 </script>
 
 <div class="absolute bottom-[2rem] left-[86.0vw] 2xl:left-[87vw]">
   <Select.Root portal={null}>
     <Select.Trigger
       class="text-md mr-auto w-64 justify-start border-none bg-transparent"
     >
       <Select.Value placeholder="Legal" class="mr-[1vw]" />
     </Select.Trigger>
     <Select.Content class="min-w-[256rem]">
       {#each items as item}
         <a href={item.href} class="w-[1000px]"
           ><Select.Item
             value={item.label.toLowerCase()}
             label={item.label}
             class="pl-2">{item.label}</Select.Item
           ></a
         >
       {/each}
     </Select.Content>
   </Select.Root>
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Footer/_components/types.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/Header/ProfileAreaView.svelte [<script lang="ts">
   import PostSignUpForm from "@components/AuthForms/PostSignUpForm.svelte";
   import { deauthenticateUser } from "@data/client/auth";
   import { DEFAULT_USER_PFP_PNG } from "@data/client/constants";
   import { isWindowingBlocked } from "@data/client/stores";
 
   import * as Dialog from "$lib/components/ui/dialog/index.js";
   import * as DropdownMenu from "$lib/components/ui/dropdown-menu";
   import SignInSignUpDialog from "@components/AuthForms/SignInSignUpDialog.svelte";
   import { openFeedbackPopup } from "@components/Header/options/feedback";
   import { Button } from "@components/ui/button";
   import { IconChevronDown } from "@tabler/icons-svelte";
 
   // Default credentials
   export let usernameTag = "ameerarsala";
   export let userEmail = "";
   export let userPfp: string = DEFAULT_USER_PFP_PNG;
   export let userFullName = "";
 
   export let authenticated = false;
   export let limboMode = false;
 
   let signInMode: "signIn" | "signUp" = "signIn";
   let signUpMode: "signIn" | "signUp" = "signUp";
 
   //usernameTag = "ameerarsala";
 </script>
 
 <!-- TODO: remove the 'true' once it is ready -->
 {#if authenticated}
   <!-- Personal Profile Area -->
   <DropdownMenu.Root>
     <DropdownMenu.Trigger>
       <Button variant="ghost" class="flex flex-row gap-4">
         <div class="flex flex-row gap-3">
           <IconChevronDown class="mt-2 h-5 w-5" />
 
           <span class="mt-0.5 text-lg">{usernameTag}</span>
           <img src={userPfp} alt="pfp" class="z-10 h-8 w-8 rounded-full bg-black object-cover" />
         </div>
       </Button>
     </DropdownMenu.Trigger>
 
     <DropdownMenu.Content class="w-56 rounded-lg shadow-lg">
       <DropdownMenu.Group>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Header/Settings.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/Header/ThemeSwitch.svelte [<script lang="ts">
   import { COLOR_THEME, updateTheme } from "$lib/data/client/theme";
   import { onMount } from "svelte";
 
   let isDarkMode: boolean;
 
   onMount(() => {
     isDarkMode = COLOR_THEME.isDarkMode();
 
     updateTheme("mounting %theme% mode...");
 
     COLOR_THEME.getAtom().subscribe((theme) => {
       isDarkMode = theme === "dark";
     });
   });
 </script>
 
 <button
   id="theme-btn"
   class="focus-outline my-auto hidden h-8 w-8 translate-x-[10%] translate-y-[-2%] rounded p-1 lg:inline"
   title="Toggles light & dark"
   aria-label="auto"
   aria-live="polite"
   on:click={() => {
     // toggle dark/light theme
     COLOR_THEME.invert();
 
     isDarkMode = COLOR_THEME.isDarkMode();
   }}
 >
   {#if isDarkMode}
     <!-- MOON -->
     <svg
       xmlns="http://www.w3.org/2000/svg"
       id="moon-svg"
       class="text-amber-500"
       viewBox="0 0 24 24"
       width="24"
       height="24"
       stroke-width="2"
       stroke="currentcolor"
       fill="none"
       stroke-linecap="round"
       stroke-linejoin="round"
     >
       <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
       <path d="M12 3c.132.0.263.0.393.0a7.5 7.5.0 007.92 12.446A9 9 0 1112 2.992z"></path>
     </svg>
   {:else}
     <!-- SUN -->
     <svg
       xmlns="http://www.w3.org/2000/svg"
       id="sun-svg"
       class="text-amber-500"
       viewBox="0 0 24 24"
       width="24"
       height="24"
       stroke-width="2"
       stroke="currentcolor"
       fill="currentcolor"
       stroke-linecap="round"
       stroke-linejoin="round"
     >
       <path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
         d="M12 12m-4 0a4 4 0 108 0 4 4 0 10-8 0"
       ></path><path
         d="M3 12h1m8-9v1m8 8h1m-9 8v1M5.6 5.6l.7.7m12.1-.7-.7.7m0 11.4.7.7m-12.1-.7-.7.7"
       ></path>
     </svg>
   {/if}
 </button>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Header/options/feedback/LeaveFeedbackPopup.svelte [<script lang="ts">
   import { Button } from "@components/ui/button";
   import * as Dialog from "@components/ui/dialog";
   import { Label } from "@components/ui/label";
   import { Textarea } from "@components/ui/textarea";
   import { Angry, Frown, Laugh, Smile } from "lucide-svelte";
   import { closablePopup, isPopupOpen } from "./stores";
 
   let rating = -1;
   let feedback = "";
 
   function submitFeedback() {
     console.log("submitting feedback...");
     // TODO: submit feedback
 
     // close this shit
     isPopupOpen.set(false);
   }
 
   $: laughStyles = rating === 4 ? "bg-ran_orange_light dark:bg-ran_orange" : "";
   $: smileStyles = rating === 3 ? "bg-ran_orange_light dark:bg-ran_orange" : "";
   $: frownStyles = rating === 2 ? "bg-ran_orange_light dark:bg-ran_orange" : "";
   $: angryStyles = rating === 1 ? "bg-ran_orange_light dark:bg-ran_orange" : "";
 </script>
 
 <Dialog.Root
   open={$isPopupOpen}
   onOpenChange={(open) => {
     isPopupOpen.set(open);
   }}
   closeOnEscape={$closablePopup}
   closeOnOutsideClick={$closablePopup}
 >
   <Dialog.Content class="flex flex-col gap-4">
     <Label class="text-lg">be honest bro how do you feel? (required)</Label>
     <div class="flex items-center space-x-2">
       <Button
         variant="outline"
         class={laughStyles}
         on:click={() => (rating = 4)}
       >
         <Laugh size={16} className="stroke-inherit" />
       </Button>
       <Button
         variant="outline"
         class={smileStyles}
         on:click={() => (rating = 3)}
       >
         <Smile size={16} className="stroke-inherit" />
       </Button>
       <Button
         variant="outline"
         class={frownStyles}
         on:click={() => (rating = 2)}
       >
         <Frown size={16} className="stroke-inherit" />
       </Button>
       <Button
         variant="outline"
         class={angryStyles}
         on:click={() => (rating = 1)}
       >
         <Angry size={16} className="stroke-inherit" />
       </Button>
     </div>
 
     <Textarea
       bind:value={feedback}
       placeholder="i hate RAN so much it's trash it's the worst thing ever"
       class="w-full"
     />
 
     <Button
       class="justify-self-end text-lg font-bold"
       disabled={rating === -1 || feedback.length === 0}
       on:click={submitFeedback}
     >
       Submit</Button
     >
   </Dialog.Content>
 </Dialog.Root>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Header/options/feedback/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/Header/options/feedback/stores.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/PaperPage/Chat/ChatBar.svelte [<script lang="ts">
   import { Textarea } from "$lib/components/ui/textarea";
   import { isDesktop } from "$lib/utils/isDesktop";
   import { IconSend } from "@tabler/icons-svelte";
   import { createEventDispatcher, onMount } from "svelte";
   import { afterUpdate } from "svelte";
   import {
     attemptHideOverlayChat,
     sendChatMessage,
   } from "../paperPageFunctions";
   import { chat, chatInputText, showChatInput } from "../paperPageStores";
 
   /** FEATURES
    *  Show/Hide (with animation) on CTRL + /
    *  On Submit, chat (which includes blurring the background and bringing up the overlay chat view if not already)
    *  Esc key will hide the overlay chat view, but if it is already hidden, it will hide this
    */
 
   let chatText = "";
 
   export let disabled = false;
 
   let textareaElement: HTMLTextAreaElement;
   let status: "active" | "inactive" = "active";
 
   let isCompositionOn = false;
 
   //const dispatch = createEventDispatcher<{ submit: void }>();
 
   onMount(() => {
     showChatInput.subscribe((visible: boolean, oldVisibility: boolean) => {
       if (visible) {
         showElement();
       } else {
         hideElement();
       }
     });
   });
 
   function showElement() {
     console.log("Showing chat input");
     //disabled = false;
 
     //Slide into view
     status = "active";
 
     // allow typing to start without any extra strings
     textareaElement.focus();
   }
 
   function hideElement() {
     console.log("Hiding chat input");
     //disabled = true;
 
     //Slide out of view
     status = "inactive";
 
     // unfocus
     textareaElement.blur();
 
     // Hide chat overlay if shown
     attemptHideOverlayChat();
   }
 
   function toggleVisibility() {
     //Make it pop in/out of view
     showChatInput.set(!$showChatInput);
   }
 
   function submitChat() {
     chatInputText.set(chatText);
 
     // Erase!
     chatText = "";
 
     //dispatch("submit"); // use a custom event instead of `event.target.form.requestSubmit()` as it does not work on Safari 14
     sendChatMessage();
   }
 
   let isCtrlOrCmdDown = false;
   let isSlashKeyDown = false;
 
   function handleShortcutKeyDown(event: KeyboardEvent) {
     switch (event.key) {
       case "Control":
       case "Meta":
         isCtrlOrCmdDown = true;
         event.preventDefault();
         break;
       case "/":
         isSlashKeyDown = true;
         break;
       default:
         break;
     }
 
     if (isCtrlOrCmdDown && isSlashKeyDown) {
       toggleVisibility();
     }
   }
 
   function handleShortcutKeyUp(event: KeyboardEvent) {
     switch (event.key) {
       case "Control":
       case "Meta":
         isCtrlOrCmdDown = false;
         event.preventDefault();
         break;
       case "/":
         isSlashKeyDown = false;
         break;
       default:
         break;
     }
   }
 
   function handleKeydown(event: KeyboardEvent) {
     //console.log("loading? " + chat.responseIsLoading.get());
 
     // submit on enter
     if (
       event.key === "Enter" &&
       !event.shiftKey &&
       !chat.responseIsLoading.get() &&
       !isCompositionOn
     ) {
       event.preventDefault();
 
       // blur to close keyboard on mobile
       textareaElement.blur();
 
       // refocus so that user on desktop can start typing without needing to reclick on textarea
       if (isDesktop(window)) {
         textareaElement.focus();
       }
 
       submitChat();
     }
   }
 
   function countNewlines(str: string): number {
     return str.split("\n").length - 1;
   }
 
   $: textareaStyle =
     chatText.length >= 100 || countNewlines(chatText) > 1
       ? "rounded-2xl h-24 p-8"
       : "rounded-full h-6 p-6";
 </script>
 
 <svelte:window
   on:keydown={handleShortcutKeyDown}
   on:keyup={handleShortcutKeyUp}
 />
 
 <div
   id="chat-bar"
   class={`fixed z-50 left-1/2 top-[87.5%] drop-shadow-md w-full max-w-[40vw] ${status}`}
   on:paste
 >
   <textarea
     enterkeyhint="send"
     tabindex={0}
     rows={1}
     {disabled}
     bind:value={chatText}
     bind:this={textareaElement}
     class={`${textareaStyle} text-lg pr-[4.25rem] max-h-32 w-full resize-none scroll-p-3 overflow-x-hidden overflow-y-scroll flex min-h-[80px] border border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50`}
     placeholder={chatText || "Chat with this paper..."}
     on:keydown={handleKeydown}
     on:click={() => {
       textareaElement.focus();
     }}
     on:compositionstart={() => (isCompositionOn = true)}
     on:compositionend={() => (isCompositionOn = false)}
     on:beforeinput
     on:focus={() => {
       textareaElement.focus();
     }}
   />
 
   <button
     on:click={submitChat}
     class="fixed z-50 top-[37.5%] bottom-[50%] right-[5%]"
   >
     <IconSend />
   </button>
 </div>
 
 <style>
   @keyframes slideDown {
     from {
       top: 87.5%;
     }
     to {
       top: 125%;
     }
   }
 
   @keyframes slideUp {
     from {
       top: 125%;
     }
     to {
       top: 87.5%;
     }
   }
 
   .inactive {
     animation: slideDown 0.1s forwards;
   }
 
   .active {
     animation: slideUp 0.1s forwards;
   }
 
   #chat-bar {
     z-index: 1000;
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/PaperPage/Chat/Overlay/ChatOverlay.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/PaperPage/Comments/Comment.svelte [<script lang="ts">
   import * as Avatar from "$lib/components/ui/avatar/index.js";
   import { Button } from "$lib/components/ui/button/index.js";
   import * as Card from "$lib/components/ui/card/index.js";
   import * as Popover from "$lib/components/ui/popover/index.js";
   import * as Tabs from "$lib/components/ui/tabs/index.js";
   import type { CommentType } from "$lib/types/comment";
   import { cn } from "$lib/utils.js";
   import { IconArrowBigUp } from "@tabler/icons-svelte";
   import { IconArrowBigDown } from "@tabler/icons-svelte";
   import { IconArrowBigUpFilled } from "@tabler/icons-svelte";
   import { IconArrowBigDownFilled } from "@tabler/icons-svelte";
   import { IconDotsVertical } from "@tabler/icons-svelte";
   import { IconFlag2 } from "@tabler/icons-svelte";
   import { IconChevronUp } from "@tabler/icons-svelte";
   import { IconPencil } from "@tabler/icons-svelte";
   import { IconPin, IconPinned, IconPinnedOff } from "@tabler/icons-svelte";
   import { createEventDispatcher, onMount } from "svelte";
   import Reply from "./Reply.svelte";
   import Subcomments from "./Subcomments.svelte";
 
   // TODO: this
   const dispatch = createEventDispatcher();
 
   export let comment: CommentType;
   export let pinned: boolean;
 
   // export let pinned: boolean;
   let lastUpvote = 0;
   let upvotes = 0;
   let upvoted = false;
   let downvoted = false;
   let reply_open = false;
 
   const pfp_source = comment.user_tag || "/icons/generic-user.svg";
 
   let reply_input = "";
 
   // let user = "Zhenjie Liang";
   let user = "Yann LeCun";
   let university = "California Polytechnic State University SLO";
   let paper_authors = ["Yann LeCun", "Andrew Ng", "Geoffrey Hinton"];
 
   onMount(() => {
     upvotes = comment.upvotes;
     lastUpvote = comment.upvotes;
     document.addEventListener("click", handleClickOutside);
   });
 
   const toggleDownvote = () => {
     if (downvoted) {
       upvotes = lastUpvote;
       upvoted = false;
       downvoted = false;
     } else {
       //we gotta make sure that if the user has already upvoted, we need to decrement by 2
       upvotes -= upvoted ? 2 : 1;
       downvoted = true;
       upvoted = false;
     }
   };
 
   const toggleUpvote = () => {
     if (upvoted) {
       upvoted = false;
       downvoted = false;
       upvotes = lastUpvote;
     } else {
       //same as above, if the user has already downvoted, we need to increment by 2
       upvotes += downvoted ? 2 : 1;
       downvoted = false;
       upvoted = true;
     }
   };
 
   const handleClickOutside = (event) => {
     if (!event.target.closest(".popover") && !event.target.closest(".button-hover")) {
       option_popover_open = false;
     }
   };
 
   function togglePin() {
     dispatch("togglePin");
   }
 
   let option_popover_open = false;
   let show_replies = false;
 
   const create_reply = () => {
     reply_open = false;
     if (!reply_input) return;
     const newComment = {
       user: user || "Anon",
       content: reply_input,
       upvotes: 0,
       replies: [],
       user_tag: `@${user}` || "Anon",
       university: university || "Anon",
       replying_to: null,
       pinned: false,
     };
     comment.replies = [...comment.replies, newComment];
     reply_input = "";
   };
 </script>
 
 <Tabs.Root class="mt-3 w-full">
   {#if pinned}
     <div class="mb-2 flex items-center text-blue-500">
       <IconPinned size={16} />
       <span class="ml-1 text-sm">Pinned by author</span>
     </div>
   {/if}
   <!-- User info section -->
   <div class="flex items-center justify-between">
     <div class="flex items-center gap-4">
       <!-- will be replaced with user's profile page -->
       <a href="/" target="_blank"
         ><Avatar.Root>
           <Avatar.Image src="/icons/generic-user.svg" />
           <Avatar.Fallback>FALLBACK</Avatar.Fallback>
         </Avatar.Root></a
       >
 
       <div>
         <div class="flex items-center gap-3">
           <Card.Title class="flex items-center gap-1">
             {comment.user}
             {#if paper_authors.includes(comment.user)}
               <IconPencil size={18} class="text-blue-500" />
             {/if}
           </Card.Title>
           <p class="text-[10px]">2 days ago</p>
         </div>
         <div class="flex items-center gap-2">
           <p class="text-xs">@{comment.user}</p>
           <p class="text-sm font-semibold">{comment.university}</p>
         </div>
       </div>
     </div>
     <!-- Options section -->
     <Popover.Root portal={null} preventScroll={false} bind:open={option_popover_open}>
       <Popover.Trigger asChild let:builder>
         <Button builders={[builder]} class="button-hover bg-transparent hover:bg-transparent">
           <IconDotsVertical size={18} class="text-black dark:text-white" />
         </Button>
       </Popover.Trigger>
       <Popover.Content class="w-30 p-2">
         <!-- Report button -->
         <button
           class="button-hover flex cursor-pointer items-center gap-2 !rounded-sm !px-2"
           on:click={() => (option_popover_open = !option_popover_open)}
         >
           <IconFlag2 size={18} class="cursor-pointer justify-self-end" />
           <span>Report</span>
         </button>
         <!-- Pin button -->
         {#if paper_authors.includes(user)}
           <button
             class="button-hover flex w-full cursor-pointer items-center gap-2 !rounded-sm !px-2"
             on:click={() => {
               togglePin();
               option_popover_open = !option_popover_open;
             }}
           >
             {#if !pinned}
               <IconPin size={18} class="cursor-pointer justify-self-end" />
             {:else}
               <IconPinnedOff size={18} class="cursor-pointer justify-self-end" />
             {/if}
             <span>{pinned ? "Unpin" : "Pin"}</span>
           </button>
         {/if}
       </Popover.Content>
     </Popover.Root>
   </div>
 
   <!-- Comment content -->
   <Card.Description class="my-2">
     {comment.content}
   </Card.Description>
 
   <!-- Upvote, downvote, and reply section -->
   <div class="container">
     <button on:click={toggleUpvote} class="button-hover">
       {#if upvoted}
         <IconArrowBigUpFilled />
       {:else}
         <IconArrowBigUp />
       {/if}
     </button>
     <div>{upvotes}</div>
     <button on:click={toggleDownvote} class="button-hover">
       {#if downvoted}
         <IconArrowBigDownFilled />
       {:else}
         <IconArrowBigDown />
       {/if}
     </button>
     <button
       on:click={() => {
         reply_open = !reply_open;
       }}
       class="button-hover text-sm font-[300]"
     >
       Reply
     </button>
   </div>
   {#if reply_open}
     <!-- reply form -->
     <Reply bind:reply_input />
     <div class="flex items-center justify-end gap-2 p-2">
       <button
         on:click={() => {
           reply_open = !reply_open;
         }}
         class="button-hover"
       >
         cancel
       </button>
       <button
         on:click={() => {
           create_reply();
         }}
         class="rounded-full bg-blue-400 px-2 py-1 text-white hover:!bg-blue-500 dark:bg-blue-700 dark:hover:!bg-blue-900"
       >
         Reply
       </button>
     </div>
   {/if}
 
   <!-- Replies section -->
   {#if comment.replies.length > 0}
     <div class="replies-container">
       <button
         on:click={() => (show_replies = !show_replies)}
         class="flex w-min items-center gap-2 rounded-md p-1 text-blue-500 hover:bg-blue-100"
       >
         <IconChevronUp class={!show_replies ? "scale-y-[-1] transform" : ""} />
         <p>{comment.replies.length}</p>
         <p>replies</p>
       </button>
       {#if show_replies}
         <div class="replies-list">
           {#each comment.replies as reply}
             <Subcomments comment={reply} bind:og={comment} />
           {/each}
         </div>
       {/if}
     </div>
   {/if}
 </Tabs.Root>
 
 <style>
   .container {
     display: flex;
     justify-content: flex-start;
     align-items: center;
     gap: 10px;
     padding-left: 0;
   }
   .replies-container {
     display: flex;
     flex-direction: column;
     gap: 5px;
   }
   .replies-list {
     margin-left: 20px; /* Indent replies for better readability */
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/PaperPage/Comments/Comments.svelte [<script lang="ts">
   import type { CommentType } from "$lib/types/comment";
   import Comment from "./Comment.svelte";
 
   export let paperID: string;
   let user = "Zhenjie Liang";
   let user_tag = "ZJL#888";
   let university = "California Polytechnic State University SLO";
   let comments = [
     {
       user: "Yann LeCun",
       content:
         "In this work we propose the Transformer, a model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output. The Transformer allows for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs.",
       upvotes: 10,
       replies: [
         {
           user: "Geoffrey Hinton",
           content: "NO CAP",
           upvotes: 3,
           replies: [],
           university: "University of Toronto",
           replying_to: null,
         },
       ],
       university: "New York University",
       replying_to: null,
       pinned: false,
     },
     {
       user: "Andrew Ng",
       content:
         "It is difficult to think of a major industry that AI will not transform. This includes healthcare, education, transportation, retail, communications, and agriculture. There are surprisingly clear paths for AI to make a big difference in all of these industries.",
       upvotes: 5,
       replies: [],
       university: "Stanford University",
       replying_to: null,
       pinned: false,
     },
     {
       user: "Geoffrey Hinton",
       content:
         "The Transformer model architecture has been a breakthrough in the field of NLP. It has allowed for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs.",
       upvotes: 3,
       replies: [],
       university: "University of Toronto",
       replying_to: null,
       pinned: false,
     },
   ];
 
   let commentContent = "";
   const createComment = (event) => {
     event.preventDefault();
     if (!commentContent) return;
     const newComment = {
       user: user || "Anon",
       content: commentContent,
       upvotes: 0,
       replies: [],
       university: university || "Anon",
       replying_to: null,
       pinned: false,
     };
     comments = [...comments, newComment];
     commentContent = "";
   };
 
   function handlePinToggle(index: number) {
     comments = comments.map((c, i) => {
       if (i === index) {
         return { ...c, pinned: !c.pinned };
       }
       return { ...c, pinned: false };
     });
 
     // Sort comments to bring pinned comment to the top
     comments = comments
       .sort((a, b) => (b.pinned ? -1 : a.pinned ? 1 : 0))
       .reverse();
   }
 
   let pinned = false;
 </script>
 
 <div class="mt-3 w-full">
   <form class="bg-stone-900">
     <textarea
       bind:value={commentContent}
       class="h-24 w-full rounded-lg bg-stone-900 p-3 hover:bg-stone-800 focus:outline-none"
       placeholder="Write a comment..."
     />
     <span></span>
     <button
       class="mt-2 w-full rounded-lg bg-stone-950 p-2 text-white"
       on:click={createComment}
     >
       Comment
     </button>
   </form>
 
   {#each comments as comment}
     <Comment {comment} />
   {/each}
 </div>
 
 <style>
   textarea {
     scrollbar-width: thin;
     scrollbar-color: #4c565a transparent;
   }
 
   textarea::-webkit-scrollbar {
     width: 8px;
   }
 
   textarea::-webkit-scrollbar-track {
     background: transparent;
   }
 
   textarea::-webkit-scrollbar-thumb {
     background-color: #d6dee1;
     border-radius: 20px;
     border: 3px solid transparent;
     background-clip: content-box;
   }
 
   textarea::-webkit-scrollbar-thumb:hover {
     background-color: #a8bbbf;
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/PaperPage/Comments/Reply.svelte [<script>
   import { M } from "svelte-motion";
 
   export let reply_input;
   // export let reply_to;
 
   let textarea;
 
   function autoResize() {
     // Reset the height to ensure it calculates the new scrollHeight correctly
     textarea.style.height = "auto";
     // Set the height to the scrollHeight to fit the content
     textarea.style.height = `${textarea.scrollHeight}px`;
   }
 </script>
 
 <div class="relative flex w-full flex-col gap-2 p-2">
   <textarea
     placeholder="Add a reply..."
     class="textarea dark:bg-transparent"
     bind:value={reply_input}
     bind:this={textarea}
     on:input={autoResize}
     rows="1"
   />
 
   <M.hr
     class="border-2 border-t border-gray-500"
     initial={{
       width: 0,
     }}
     animate={{
       width: "100%",
     }}
     transition={{ duration: 0.5 }}
   />
 </div>
 
 <style>
   /* Hide scrollbar for WebKit-based browsers (Chrome, Safari) */
   textarea::-webkit-scrollbar {
     display: none;
   }
 
   /* Hide scrollbar for Firefox */
   textarea {
     scrollbar-width: none; /* Firefox */
     overflow: hidden; /* Ensure content is clipped and scrollbar is hidden */
   }
 
   .textarea {
     width: 100%;
     border: none;
     outline: none;
     resize: none; /* Disable manual resizing */
     overflow: hidden; /* Hide scrollbar */
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/PaperPage/Comments/Subcomments.svelte [<script lang="ts">
   import * as Avatar from "$lib/components/ui/avatar/index.js";
   import { Button } from "$lib/components/ui/button/index.js";
   import * as Card from "$lib/components/ui/card/index.js";
   import { Input } from "$lib/components/ui/input/index.js";
   import { Label } from "$lib/components/ui/label/index.js";
   import * as Popover from "$lib/components/ui/popover/index.js";
   import * as Tabs from "$lib/components/ui/tabs/index.js";
   import type { CommentType } from "$lib/types/comment";
   import {
     IconArrowBigDown,
     IconArrowBigDownFilled,
     IconArrowBigUp,
     IconArrowBigUpFilled,
     IconDotsVertical,
     IconFlag2,
   } from "@tabler/icons-svelte";
   import { onMount } from "svelte";
   import Reply from "./Reply.svelte";
 
   export let comment: CommentType;
   export let og: CommentType;
 
   let user = "Zhenjie Liang";
   let user_tag = "ZJL#888";
   let university = "California Polytechnic State University SLO";
   let paper_authors = ["Yann LeCun", "Andrew Ng", "Geoffrey Hinton"];
 
   let lastUpvote = 0;
   let upvotes = 0;
   let upvoted = false;
   let downvoted = false;
   let reply_input = "";
   let option_popover_open = false;
   let reply_popover_open = false;
   let reply_open = false;
 
   onMount(() => {
     upvotes = comment.upvotes;
     lastUpvote = comment.upvotes;
   });
 
   const toggleDownvote = () => {
     if (downvoted) {
       upvotes = lastUpvote;
       upvoted = false;
       downvoted = false;
     } else {
       //we gotta make sure that if the user has already upvoted, we need to decrement by 2
       upvotes -= upvoted ? 2 : 1;
       downvoted = true;
       upvoted = false;
     }
   };
   const toggleUpvote = () => {
     if (upvoted) {
       upvoted = false;
       downvoted = false;
       upvotes = lastUpvote;
     } else {
       //same as above, if the user has already downvoted, we need to increment by 2
       upvotes += downvoted ? 2 : 1;
       downvoted = false;
       upvoted = true;
     }
   };
 
   const create_reply = () => {
     reply_open = false;
     if (!reply_input) return;
     const newComment = {
       user: user || "Anon",
       content: reply_input,
       upvotes: 0,
       replies: [],
       user_tag: user_tag || "Anon",
       university: university || "Anon",
       replying_to: comment.user_tag !== user_tag ? comment.user : null, // Set the user being replied to
     };
     og.replies = [...og.replies, newComment];
     reply_input = "";
   };
 </script>
 
 <Tabs.Root class="float-right mt-3 w-[95%]">
   <!-- User info section -->
   <div class="flex items-center justify-between">
     <div class="flex items-center gap-4">
       <Avatar.Root class="h-6 w-6">
         <Avatar.Image src="/icons/generic-user.svg" />
         <Avatar.Fallback>FALLBACK</Avatar.Fallback>
       </Avatar.Root>
       <div>
         <div class="flex items-center gap-3">
           <Card.Title class="text-sm">@{comment.user}</Card.Title>
           <p class="text-[10px]">2 days ago</p>
         </div>
       </div>
     </div>
     <!-- Options section -->
     <Popover.Root
       portal={null}
       preventScroll={false}
       bind:open={option_popover_open}
     >
       <Popover.Trigger asChild let:builder>
         <Button
           builders={[builder]}
           class="button-hover bg-transparent hover:bg-transparent"
         >
           <IconDotsVertical size={18} class="text-black dark:text-white" />
         </Button>
       </Popover.Trigger>
       <Popover.Content class="w-30 p-2">
         <button
           class="button-hover flex cursor-pointer items-center gap-2 !rounded-sm !px-2"
           on:click={() => (option_popover_open = !option_popover_open)}
         >
           <IconFlag2 size={18} class="cursor-pointer justify-self-end" />
           <span>Report</span>
         </button>
       </Popover.Content>
     </Popover.Root>
   </div>
 
   <!-- Comment content -->
   <Card.Description class="my-2">
     {#if comment.replying_to}
       <span class="text-sm font-semibold">@{comment.replying_to}</span>
     {/if}
     {comment.content}
   </Card.Description>
 
   <!-- Upvote, downvote, and reply section -->
   <div class="container">
     <button on:click={toggleUpvote} class="button-hover">
       {#if upvoted}
         <IconArrowBigUpFilled />
       {:else}
         <IconArrowBigUp />
       {/if}
     </button>
     <div>{upvotes}</div>
     <button on:click={toggleDownvote} class="button-hover">
       {#if downvoted}
         <IconArrowBigDownFilled />
       {:else}
         <IconArrowBigDown />
       {/if}
     </button>
     <button
       on:click={() => {
         reply_open = !reply_open;
       }}
       class="button-hover text-sm font-[300]"
     >
       Reply
     </button>
   </div>
   {#if reply_open}
     <!-- reply form -->
     <Reply bind:reply_input />
     <div class="flex items-center justify-end gap-2 p-2">
       <button
         on:click={() => {
           reply_open = !reply_open;
         }}
         class="button-hover"
       >
         cancel
       </button>
       <button
         on:click={() => {
           create_reply();
         }}
         class="rounded-full bg-blue-400 px-2 py-1 text-white hover:!bg-blue-500 dark:bg-blue-700 dark:hover:!bg-blue-900"
       >
         Reply
       </button>
     </div>
   {/if}
 </Tabs.Root>
 
 <style>
   .container {
     display: flex;
     justify-content: flex-start;
     align-items: center;
     gap: 10px;
     padding-left: 0;
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/PaperPage/Insights/Insight.svelte [<script lang="ts">
   export let title: string;
 </script>
 
 <div
   class="inline-flex w-[32%] items-center justify-center rounded-md border border-transparent bg-supporting p-4 text-black dark:text-white"
 >
   <p class="flex flex-row flex-wrap justify-center">
     <span class="title inline-flex w-full justify-center">{title}</span>
     <slot name="featured-stat" />
     <slot name="insight-descriptor">
       <span class="description text-blue-500"
         >There is no insight for {title} on this paper at this time.</span
       >
     </slot>
   </p>
 </div>
 
 <style>
   .title {
     font-weight: bold;
     margin-bottom: 0.1rem;
   }
   .description {
     font-size: 0.7rem;
     justify-content: center;
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/PaperPage/PaperView/AttnPaper.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/PaperPage/PaperView/PaperHTMLView.svelte [<script lang="ts">
   import { ScrollArea } from "@components/ui/scroll-area/index.js";
 
   export let paperHTML: string;
 </script>
 
 <ScrollArea
   class="fixed top-[11%] h-[87.5vh] w-full max-w-[45vw] rounded-md border p-4"
   orientation="vertical"
 >
   <div
     id="paper-html-container"
     class="max-w-[42.5vw] p-2 h-full text-wrap prose lg:prose-lg dark:prose-invert"
   >
     {@html paperHTML}
   </div>
 </ScrollArea>
 
 <style>
   #paper-html-container {
     @apply prose h-full max-w-[42.5vw] text-wrap p-2 dark:prose-invert lg:prose-lg;
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/PaperPage/Preview/Previews.svelte [<script lang="ts">
   import CompareLMs from "@components/Previews/LLMComparison/CompareLMs.svelte";
   import type { LMEntry } from "@components/Previews/LLMComparison/types";
 
   import { BACKEND_URL } from "@config/envconfig";
 
   export let paperID: string;
 
   let lm1Entry: LMEntry = {
     name: "Transformer",
     title: "Transformer",
     generateText: async (text: string, setGeneratedContent: (generatedContent: string) => void) => {
       console.log(`Generating·text·with·Transformer...${text}`);
 
       function styleText(text: string) {
         let prefix = "<div style='font-weight: bold; color: orange; background-color: #FFD700;'>";
         let suffix = "</div>";
 
         return prefix + text + suffix;
       }
 
       try {
         fetch(`${BACKEND_URL}/demos/paper/${paperID}/1`, {
           method: "POST",
           headers: {
             "Content-Type": "application/json",
           },
           body: JSON.stringify({
             input_data: text,
             data_type: "str",
           }),
         })
           .then((response) => {
             if (!response.ok) {
               throw new Error(`HTTP error status: ${response.status}`);
             }
 
             return response.json();
           })
           .then((result) => {
             const resultingText: string = result[0].generated_text;
             //console.log("RESULTING TEXT: " + resultingText);
 
             const styledText: string = styleText(resultingText);
             console.log(`STYLED·TEXT: ${styledText}`);
             setGeneratedContent(styledText);
 
             return styledText;
           });
       } catch (error) {
         console.error(`Error: ${error}`);
       }
     },
   };
 
   let lm2Entry: LMEntry = {
     name: "LSTM",
     title: "LSTM (previous SOTA)",
     generateText: async (text: string, setGeneratedContent: (generatedContent: string) => void) => {
       console.log("Generating text with LSTM...");
 
       function styleText(text: string) {
         let prefix = "<div class='text-orange-500 font-bold'>";
         let suffix = "</div>";
 
         return prefix + text + suffix;
       }
 
       try {
         const response = await fetch(`${BACKEND_URL}/demos/paper/${paperID}/2`, {
           method: "POST",
           headers: {
             "Content-Type": "application/json",
             Accept: "text/event-stream", // Optional, depending on your server setup
           },
           body: JSON.stringify({
             input_data: text,
             data_type: "str",
           }),
         });
 
         if (!response.ok) {
           throw new Error(`STREAMING RESPONSE IS NOT OK; HTTP error status: ${response.status}`);
         }
 
         const reader = response.body.getReader();
         let decoder = new TextDecoder();
 
         let aggregatedText = "";
 
         while (true) {
           const { done, value } = await reader.read();
           if (done) {
             const styledText: string = styleText(aggregatedText);
             return styledText;
           }
 
           const token: string = decoder.decode(value);
 
           // Process the token here
           aggregatedText += token;
 
           const styledText: string = styleText(aggregatedText);
           setGeneratedContent(styledText);
         }
       } catch (error) {
         console.error("Error: " + error);
       }
     },
   };
 </script>
 
 <div>
   <CompareLMs lm1={lm1Entry} lm2={lm2Entry} />
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/PaperPage/Usage/Usage.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/PaperPage/paperPageFunctions.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/PaperPage/paperPageStores.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/Previews/LLMComparison/CompareLMs.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/Previews/LLMComparison/stores.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/Previews/LLMComparison/types.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/Previews/TextToImage/CircleSpinner.svelte [<!--Credit to: https://github.com/Schum123/svelte-loading-spinners/blob/master/src/lib/Circle.svelte-->
 <script lang="ts">
   type SpinnerTypes = {
     size: string | number;
     color: string;
     unit: string;
     duration: string;
     pause: boolean;
   };
   export let color: SpinnerTypes["color"] = "#939185";
   export let unit: SpinnerTypes["unit"] = "px";
   export let duration: SpinnerTypes["duration"] = "0.75s";
   export let size: SpinnerTypes["size"] = "30";
   export let pause: SpinnerTypes["pause"] = false;
 </script>
 
 <div
   class="circle"
   class:pause-animation={pause}
   style="--size: {size}{unit}; --color: {color}; --duration: {duration}"
 />
 
 <style>
   .circle {
     height: var(--size);
     width: var(--size);
     border-color: var(--color) transparent var(--color) var(--color);
     border-width: calc(var(--size) / 15);
     border-style: solid;
     border-image: initial;
     border-radius: 50%;
     animation: var(--duration) linear 0s infinite normal none running rotate;
   }
   .pause-animation {
     animation-play-state: paused;
   }
   @keyframes rotate {
     0% {
       transform: rotate(0);
     }
     100% {
       transform: rotate(360deg);
     }
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Previews/TextToImage/TextToImage.svelte [<script lang="ts">
   //Need:
   //1 maybe 2 input fields
   //1 button
   //1 image div
   import Button from "$lib/components/ui/button/button.svelte";
   import { Input } from "$lib/components/ui/input";
   import CircleSpinner from "@components/Previews/TextToImage/CircleSpinner.svelte";
   let generating = false;
   let src = null;
   let inputText = "";
 
   function genImage(text: string) {
     // just gonna use a placeholder image for now
     console.log("Generating image for: ", text);
     generating = true;
     setTimeout(() => {
       generating = false;
       src = "https://via.placeholder.com/150";
     }, 2000);
   }
 </script>
 
 <div
   class=" container flex items-center justify-center mt-5 p-5 border rounded-md flex-col gap-5"
 >
   <!-- this is the query input and button div -->
   <div class="flex gap-5 w-full">
     <Input placeholder="Text to image!" class="w-full" bind:value={inputText} />
     <!-- <Input placeholder="Enter text here" /> -->
     <Button on:click={() => genImage(inputText)} disabled={generating}
       >Generate Image</Button
     >
   </div>
 
   <!-- this is the image div -->
   {#if generating}
     <CircleSpinner />
   {:else if src}
     <img {src} alt="image" aria-hidden="true" />
   {/if}
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/PricingPage/PricingCardHeader.tsx []
/home/sanner/Coding/RAN/ran-app-native/src/components/PricingPage/PricingSwitch.tsx []
/home/sanner/Coding/RAN/ran-app-native/src/components/PricingPage/pricingStore.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ProfileUpdate/ProfileUpdate.svelte [<script lang="ts">
   import * as Avatar from "$lib/components/ui/avatar/index.ts";
   import * as Card from "$lib/components/ui/card/index.ts";
   import { Input, Label, TextArea } from "@components/ui/SignupForm";
   import { Button } from "@components/ui/button";
   import { Checkbox } from "@components/ui/checkbox";
   import { FormButton } from "@components/ui/form";
   import { parseImageUrlFromDatabase } from "@data/client/user";
   import { IconCamera } from "@tabler/icons-svelte";
   import type { User } from "@types/user";
   import { onMount } from "svelte";
 
   import { BACKEND_URL } from "@config/envconfig";
 
   let shownPfpSrc = "/avatar.jpg";
   let username = "";
   let fullname = "";
   let password = "";
   let confirmPassword = "";
   let researchInterests = "";
   let mailingListChecked = false;
   let tosCocChecked = false;
   let showCameraButton = false;
   let fileInput: HTMLInputElement;
   export let profile_picture_url = "";
   let pfpStyles: string;
   let pfpChanged = false;
   let imageId = "";
   let user: User = null;
 
   onMount(async () => {
     await getUserProfile().then((user) => {
       shownPfpSrc = parseImageUrlFromDatabase(user.profile_picture_url);
       console.log("Profile Picture Source: ", shownPfpSrc);
     });
   });
 
   const basePfpStyles =
     "col-start-1 row-start-1 z-10 rounded-full h-36 w-36 object-cover bg-zinc-800"; // bg is black so that the user isn't allowed to have a transparent pfp
 
   $: pfpStyles = showCameraButton ? basePfpStyles + " opacity-50" : basePfpStyles;
 
   async function getUserProfile(): User {
     return await fetch(`${BACKEND_URL}/user`, {
       method: "GET",
       headers: {
         Authorization: `Bearer ${localStorage.getItem("ran-auth-session")}`,
       },
     })
       .then(async (response) => {
         if (response.ok) {
           let jsonResponse = await response.json();
           return jsonResponse;
         } else {
           console.error("Failed to get user profile");
         }
       })
       .catch((error) => {
         console.error("Failed to get user profile: " + error);
       });
   }
 
   function handleProfilePictureClick() {
     fileInput.click();
   }
 
   async function updateUserAccount(event: Event) {
     const formData = new FormData();
     formData.append("username", username);
     formData.append("fullname", fullname);
     formData.append("password", password);
     formData.append("research_interests", researchInterests);
     formData.append("mailing_list", mailingListChecked);
 
     console.log(formData);
     alert(localStorage.getItem("ran-auth-session"));
     console.log("Updating user account...");
     let loggedInUser = null;
     await fetch(`${BACKEND_URL}/user/update`, {
       method: "POST",
       body: formData,
       headers: {
         Authorization: `Bearer ${localStorage.getItem("ran-auth-session")}`,
       },
     })
       .then(async (response) => {
         if (response.ok) {
           loggedInUser = await response.json();
           user = loggedInUser;
         } else {
           window.location.href = "/404";
         }
       })
       .catch((error) => {
         console.error("Failed to update user account: " + error);
       });
     return loggedInUser;
   }
 
   async function onProfilePictureChange(e: Event) {
     pfpChanged = true;
     console.log("Profile picture changed");
     // Read the file and set the profile picture
 
     let file: Blob = (e.target as HTMLInputElement).files?.[0] as Blob;
     // check if the file is an image
     if (file) {
       const reader: FileReader = new FileReader();
       reader.onload = async (event) => {
         const selectedImageSrc = event.target?.result;
         shownPfpSrc = (selectedImageSrc ? selectedImageSrc : userPfp) as string;
 
         const formData = new FormData();
 
         // Verify if the
         if (!file.type.startsWith("image/")) {
           console.error("File is not an image");
           return;
         }
         formData.append("profile_picture", file);
         if (file.size > 100000000) {
           throw new Error("File size too large");
         }
 
         fetch(`${ROOT_URL}/~api/user/profile_upload`, {
           method: "POST",
           body: formData,
           credentials: "include",
         })
           .then(async (res) => {
             console.log(res);
             imageId = await res.text();
             fetch(`${BACKEND_URL}/~api/user/set_profile_picture`, {
               method: "POST",
               body: JSON.stringify({ imageId }),
               headers: {
                 "Cwontent-Type": "application/json",
                 Authorization: `Bearer ${localStorage.getItem("ran-auth-session")}`,
               },
             })
               .then(async (res) => {
                 console.log(res);
                 profile_picture_url = await res.text();
               })
               .catch((error) => {
                 console.error("Failed to set profile picture: " + error);
               });
           })
           .catch((error) => {
             console.error("Failed to set profile picture: " + error);
           });
       };
       reader.readAsDataURL(file);
 
       // Upload the profile picture to the server
       // Re:set the selectedImageSrc to the URL of the uploaded image on the server
     }
   }
 </script>
 
 <Card.Root class="row flex basis-8/12 p-6">
   <form class="p-5">
     <Label htmlFor="username" className="text-md">Username</Label>
     <Input
       className="text-md"
       id="username"
       placeholder="username"
       bind:value={username}
       tabindex="-1"
     />
     <Label htmlFor="fullname" className="text-md">Full Name</Label>
     <Input
       className="text-md"
       id="fullname"
       placeholder="Full Name"
       bind:value={fullname}
       tabindex="-1"
     />
     <div>
       <Label htmlFor="password">Password</Label>
       <Input
         className="text-3xl"
         id="password"
         type="password"
         placeholder="•••••••••"
         bind:value={password}
         tabindex="-1"
       />
       <Label htmlFor="confirmPassword">Confirm Password</Label>
       <Input
         className="text-3xl"
         id="confirmPassword"
         type="password"
         placeholder="•••••••••"
         bind:value={confirmPassword}
         tabindex="-1"
       />
     </div>
     <div>
       <Label htmlFor="research-interests" className="text-md">Research Interests</Label>
       <TextArea
         className="text-md min-h-16 max-h-64"
         id="research-interests"
         placeholder="List your research interests!"
         rows="5"
         bind:value={researchInterests}
         tabindex="-1"
       />
     </div>
     <div class="mt-3 flex flex-col">
       <!-- Mailing List checkbox -->
       <div class="flex items-center space-x-2">
         <Checkbox
           id="terms"
           bind:checked={mailingListChecked}
           aria-labelledby="mailing-list-label"
         />
         <Label
           id="mailing-list-label"
           class="text-[0.9rem] font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
         >
           Join our mailing list
         </Label>
       </div>
 
       <div class="mt-6">
         <Button class="w-full text-lg font-extrabold" on:click={updateUserAccount}
           >Update Account</Button
         >
       </div>
     </div>
   </form>
 
   <div class="flex flex-col items-center">
     <input
       id="hidden-input"
       type="file"
       accept="image/*"
       bind:this={fileInput}
       on:change={onProfilePictureChange}
       class="hidden"
     />
     <!-- PFP -->
     <!-- svelte-ignore a11y-no-static-element-interactions -->
     <button
       class="relative grid"
       on:mouseenter={() => {
         showCameraButton = true;
       }}
       on:mouseleave={() => {
         showCameraButton = false;
       }}
       on:click={handleProfilePictureClick}
       tabindex="-1"
     >
       <img src={shownPfpSrc} alt="Profile Pic" class={`${pfpStyles} z-10`} />
       {#if showCameraButton}
         <div class="absolute inset-0 z-20 flex items-center justify-center">
           <IconCamera class="h-14 w-14 drop-shadow-lg" />
         </div>
       {/if}
     </button>
   </div>
 </Card.Root>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ProfileUpdate/ProfileUpdateTemp.svelte [<script lang="ts">
   import * as Avatar from "$lib/components/ui/avatar/index.ts";
   import * as Card from "$lib/components/ui/card/index.ts";
   import { Input, Label, TextArea } from "@components/ui/SignupForm";
   import { Button } from "@components/ui/button";
   import { Checkbox } from "@components/ui/checkbox";
   import { FormButton } from "@components/ui/form";
   import { IconCamera } from "@tabler/icons-svelte";
   import { onMount } from "svelte";
 
   import { BACKEND_URL } from "@config/envconfig";
 
   let shownPfpSrc = "/avatar.jpg";
   let username = "";
   let fullname = "";
   let password = "";
   let confirmPassword = "";
   let researchInterests = "";
   let mailingListChecked = false;
   let tosCocChecked = false;
   let showCameraButton = false;
   let fileInput: HTMLInputElement;
   export let profile_picture_url = "";
   let pfpStyles: string;
   let pfpChanged = false;
   let imageId = "";
 
   const basePfpStyles =
     "col-start-1 row-start-1 z-10 rounded-full h-36 w-36 object-cover bg-zinc-800"; // bg is black so that the user isn't allowed to have a transparent pfp
 
   $: pfpStyles = showCameraButton ? basePfpStyles + " opacity-50" : basePfpStyles;
 
   function handleProfilePictureClick() {
     fileInput.click();
   }
 
   function updateUserAccount(event: Event) {
     const formData = new FormData();
     formData.append("username", username);
     formData.append("fullname", fullname);
     formData.append("password", password);
     formData.append("research_interests", researchInterests);
     formData.append("mailing_list", mailingListChecked);
 
     console.log(formData);
     alert(localStorage.getItem("ran-auth-session"));
     console.log("Updating user account...");
     fetch(`${BACKEND_URL}/user/update`, {
       method: "POST",
       body: formData,
       headers: {
         Authorization: `Bearer ${localStorage.getItem("ran-auth-session")}`,
       },
     })
       .then(async (response) => {
         if (response.ok) {
           const jsonResponse = await response.json();
           console.log(jsonResponse);
         } else {
           console.error("Failed to update user account");
         }
       })
       .catch((error) => {
         console.error("Failed to update user account: " + error);
       });
   }
 
   async function onProfilePictureChange(e: Event) {
     pfpChanged = true;
     console.log("Profile picture changed");
     // Read the file and set the profile picture
 
     let file: Blob = (e.target as HTMLInputElement).files?.[0] as Blob;
     // check if the file is an image
     if (file) {
       const reader: FileReader = new FileReader();
       reader.onload = async (event) => {
         const selectedImageSrc = event.target?.result;
         shownPfpSrc = (selectedImageSrc ? selectedImageSrc : userPfp) as string;
 
         const formData = new FormData();
 
         // Verify if the
         if (!file.type.startsWith("image/")) {
           console.error("File is not an image");
           return;
         }
         formData.append("profile_picture", file);
         if (file.size > 100000000) {
           throw new Error("File size too large");
         }
 
         fetch("/~api/user/profile_upload", {
           method: "POST",
           body: formData,
           credentials: "include",
         })
           .then(async (res) => {
             console.log(res);
             imageId = await res.text();
             fetch(`${BACKEND_URL}/~api/user/set_profile_picture`, {
               method: "POST",
               body: JSON.stringify({ imageId }),
               headers: {
                 "Cwontent-Type": "application/json",
                 Authorization: `Bearer ${localStorage.getItem("ran-auth-session")}`,
               },
             })
               .then(async (res) => {
                 console.log(res);
                 profile_picture_url = await res.text();
               })
               .catch((error) => {
                 console.error("Failed to set profile picture: " + error);
               });
           })
           .catch((error) => {
             console.error("Failed to set profile picture: " + error);
           });
       };
       reader.readAsDataURL(file);
 
       // Upload the profile picture to the server
       // Re:set the selectedImageSrc to the URL of the uploaded image on the server
     }
   }
 </script>
 
 <div class="flex justify-center space-x-5">
   <Card.Root class="basis-8/12 p-4">
     <form class="p-5">
       <Label htmlFor="username" className="text-md">Username</Label>
       <Input
         className="text-md"
         id="username"
         placeholder="username"
         bind:value={username}
         tabindex="-1"
       />
       <Label htmlFor="fullname" className="text-md">Full Name</Label>
       <Input
         className="text-md"
         id="fullname"
         placeholder="Full Name"
         bind:value={fullname}
         tabindex="-1"
       />
       <div>
         <Label htmlFor="password">Password</Label>
         <Input
           className="text-3xl"
           id="password"
           type="password"
           placeholder="•••••••••"
           bind:value={password}
           tabindex="-1"
         />
         <Label htmlFor="confirmPassword">Confirm Password</Label>
         <Input
           className="text-3xl"
           id="confirmPassword"
           type="password"
           placeholder="•••••••••"
           bind:value={confirmPassword}
           tabindex="-1"
         />
       </div>
       <div>
         <Label htmlFor="research-interests" className="text-md">Research Interests</Label>
         <TextArea
           className="text-md min-h-16 max-h-64"
           id="research-interests"
           placeholder="List your research interests!"
           rows="5"
           bind:value={researchInterests}
           tabindex="-1"
         />
       </div>
       <div class="mt-3 flex flex-col">
         <!-- Mailing List checkbox -->
         <div class="flex items-center space-x-2">
           <Checkbox
             id="terms"
             bind:checked={mailingListChecked}
             aria-labelledby="mailing-list-label"
           />
           <Label
             id="mailing-list-label"
             class="text-[0.9rem] font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
           >
             Join our mailing list
           </Label>
         </div>
 
         <div class="mt-6">
           <Button class="w-full text-lg font-extrabold" on:click={updateUserAccount}
             >Update Account</Button
           >
         </div>
       </div>
     </form>
   </Card.Root>
   <Card.Root class="basis-5/12 p-40">
     <div class="flex flex-col items-center">
       <input
         id="hidden-input"
         type="file"
         accept="image/*"
         bind:this={fileInput}
         on:change={onProfilePictureChange}
         class="hidden"
       />
 
       <!-- PFP -->
       <!-- svelte-ignore a11y-no-static-element-interactions -->
       <button
         class="grids"
         on:mouseenter={() => {
           showCameraButton = true;
         }}
         on:mouseleave={() => {
           showCameraButton = false;
         }}
         on:click={handleProfilePictureClick}
         tabindex="-1"
       >
         {#if showCameraButton}
           <div class="z-20 col-start-1 row-start-1 mx-auto my-auto">
             <IconCamera class="h-14 w-14 drop-shadow-lg" />
           </div>
         {/if}
         <img src={shownPfpSrc} alt="Profile Pic" class={pfpStyles} />
       </button>
     </div>
   </Card.Root>
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/RANSearch/SearchBar.svelte [<script lang="ts">
   import { Button } from "@components/ui/button";
   import { Input } from "@components/ui/input";
   import { Textarea } from "@components/ui/textarea";
   import {
     IconArrowBigRightFilled,
     IconArrowNarrowRight,
     IconArrowRight,
     IconArrowRightToArc,
     IconPaperclip,
   } from "@tabler/icons-svelte";
   import { isDesktop } from "@utils/isDesktop";
   import { atom } from "nanostores";
   import { onMount } from "svelte";
 
   import * as Tooltip from "$lib/components/ui/tooltip/index.js";
   import type { SearchSuggestion } from "@types/searchSuggestions";
   import { clickOutside } from "@utils/clickOutside";
   import SearchSuggestions from "./SearchSuggestions.svelte";
 
   import { shuffleArray } from "@utils/commonAlgorithms";
 
   import { ranSettings } from "@data/client/stores";
 
   let inputText = "";
   let isCompositionOn = false;
 
   $: formattedInputText = (inputText || " ") + "\n\n\n";
 
   let textareaElement;
   const isFocused = atom(false);
 
   export let placeholder = "Search or Ask anything...";
   export let minRows = 2;
   export let maxRows: number | null = 10;
   export let disabled = false;
 
   const iconRowDiff: number = 2; // for the option icons
 
   $: minHeight = `${1 + (minRows + iconRowDiff) * 1.5}em`;
   $: maxHeight = maxRows ? `${1 + (maxRows + iconRowDiff) * 1.5}em` : "auto";
 
   function parseValue(value: string): number {
     const regex = /\d+(\.\d+)?/;
     const matches = value.match(regex);
 
     return Number.parseFloat(matches ? matches[0] : "0");
   }
 
   /*function getMaxHeightEmInPixels(element): number {
     const maxHeight: string = element.style.maxHeight;
     const maxHeightEm: number = parseValue(maxHeight);
     const fontSize: number = Number.parseFloat(window.getComputedStyle(element).fontSize);
 
     return maxHeightEm * fontSize;
   }*/
 
   let attachedFiles;
   let fileInput: HTMLInputElement;
 
   const COMMAND_SUGGESTIONS: SearchSuggestion[] = [
     {
       suggestion: "/claim",
       parameters: "<arxiv ids, links, or ran links>",
     },
     {
       suggestion: "/cite",
       parameters: "<arxiv ids, links, or ran links>",
     },
     {
       suggestion: "/view",
       parameters: "<arxiv id, link, or ran link>",
     },
     {
       suggestion: "/bookmark",
       parameters: "<arxiv ids, links, or ran links>",
     },
   ];
 
   // TODO: randomly choose a few from some list and store it here
   const ASK_SUGGESTIONS: SearchSuggestion[] = [
     { suggestion: "How does MAMBA compare to traditional Transformers?" },
     {
       suggestion: "Is it possible to 'diffuse' text like with Stable Diffusion?",
     },
     {
       suggestion: "How do GNNs reinterpret transformers? Show me some diagrams.",
     },
     {
       suggestion:
         "What is the difference between a transformer and a language model? Show me an example.",
     },
     { suggestion: "Why are KANs so special? What's all the hype about?" },
     {
       suggestion: "Show me the landscape of image generation at the current SOTA level.",
     },
   ];
 
   let suggestionsOpen = false;
   let suggestions: SearchSuggestion[] = [];
   let topXSuggestions = 3;
   $: {
     if (inputText === "/") {
       openSuggestions();
     }
 
     if (inputText.length > 0 && inputText.startsWith("/")) {
       console.log("DISPLAYING COMMAND SUGGESTIONS");
 
       suggestions = COMMAND_SUGGESTIONS;
       topXSuggestions = 5;
 
       if (ranSettings.get().commandSuggestions === "false") {
         closeSuggestions();
       }
     } else {
       console.log("DISPLAYING ASK SUGGESTIONS");
 
       suggestions = shuffleArray(ASK_SUGGESTIONS);
       topXSuggestions = 3;
 
       if (ranSettings.get().searchSuggestions === "false") {
         closeSuggestions();
       }
     }
   }
 
   function openSuggestions() {
     //console.log("Opening suggestions...");
     suggestionsOpen = true;
   }
 
   function closeSuggestions() {
     //console.log("Closing suggestions...");
     suggestionsOpen = false;
   }
 
   let isSlashDown = false;
   let isCtrlOrCmdDown = false;
   let isKDown = false;
   let isShiftDown = false;
   let isEnterDown = false;
 
   onMount(() => {
     isFocused.subscribe((focused) => {
       if (focused) {
         textareaElement.focus();
         if (inputText.length === 0 && ranSettings.get().searchSuggestions === "true") {
           openSuggestions();
         }
       } else {
         textareaElement.blur();
         //closeSuggestions();
       }
     });
 
     if (isDesktop(window)) {
       // Do not immediately open up the keyboard on mobile
       isFocused.set(true);
     }
   });
 
   function handleKeyDown(event) {
     // Only want to handle first press
     if (event.repeat) {
       return;
     }
 
     switch (event.key) {
       case "Control":
       case "Meta":
         isCtrlOrCmdDown = true;
         event.preventDefault();
         break;
       case "/":
         isSlashDown = true;
         break;
       case "k":
         isKDown = true;
         break;
       case "Shift":
         isShiftDown = true;
         break;
       case "Enter":
         isEnterDown = true;
         break;
     }
 
     if (isEnterDown && !isShiftDown && !isCompositionOn) {
       event.preventDefault();
       submit();
     }
 
     if ((isSlashDown || (isCtrlOrCmdDown && isKDown)) && !isFocused.get()) {
       event.preventDefault();
       isFocused.set(true);
     }
   }
 
   function onKeyUp(event) {
     switch (event.key) {
       case "/":
         isSlashDown = false;
         break;
       case "Control":
       case "Meta":
         isCtrlOrCmdDown = false;
         event.preventDefault();
         break;
       case "k":
         isKDown = false;
         break;
       case "Shift":
         isShiftDown = false;
         break;
       case "Enter":
         isEnterDown = false;
         break;
     }
   }
 
   function handlePaperclipClick() {
     console.log("Opening file picker...");
 
     // Open the file picker
     fileInput.click();
   }
 
   function onAttachedFileChange(e: Event) {
     console.log("Attached file changed");
 
     // TODO: do something with these files
 
     const file = (e.target as HTMLInputElement).files?.[0];
     if (file) {
       const reader = new FileReader();
       reader.onload = (event) => {
         // TODO: check for multiple files
         attachedFiles = event.target?.result;
         console.log("Files attached");
       };
       reader.readAsDataURL(file);
     }
   }
 
   function submit() {
     // TODO: submit the search using a dispatch event
     console.log("submit");
   }
 </script>
 
 <!-- Keybinds -->
 <svelte:window on:keydown={handleKeyDown} on:keyup={onKeyUp} />
 
 <div class="relative h-full w-full" use:clickOutside on:click_outside={closeSuggestions}>
   <!-- This is for the auto resize -->
   <div
     class="searchbox expanding-textarea invisible h-full w-full whitespace-pre-wrap break-words text-start indent-0 font-urbanist"
     aria-hidden="true"
     style="min-height: {minHeight}; max-height: {maxHeight}"
   >
     {formattedInputText}
   </div>
 
   <div class="searchbox absolute left-0 top-0 h-full w-full">
     <textarea
       {placeholder}
       class="searchbox expanding-textarea h-[85%] w-full resize-none border-none"
       enterkeyhint="send"
       tabindex="0"
       rows="1"
       {disabled}
       bind:value={inputText}
       on:focus={() => {
         isFocused.set(true);
       }}
       on:blur={() => {
         isFocused.set(false);
       }}
       on:compositionstart={() => (isCompositionOn = true)}
       on:compositionend={() => (isCompositionOn = false)}
       on:click={() => {
         if (ranSettings.get().searchSuggestions === "true") {
           openSuggestions();
         }
       }}
       bind:this={textareaElement}
     />
 
     <!-- ICONS/BUTTONS -->
     <div id="chat-icon-buttons">
       <div>
         <Tooltip.Root openDelay={50}>
           <Tooltip.Trigger asChild let:builder>
             <Button
               class="absolute bottom-[3%] right-[1.5%] z-30 rounded-full px-2 py-0 hover:text-ran_orange disabled:opacity-50 dark:bg-background dark:text-white dark:hover:text-ran_orange"
               variant="ghost"
               builders={[builder]}
               disabled={disabled || !inputText || (inputText && inputText.length === 0)}
               on:click={submit}
             >
               <IconArrowRightToArc class="h-7 w-7" />
             </Button>
           </Tooltip.Trigger>
 
           <Tooltip.Content>
             {#if inputText.length > 1}
               <p>Accelerate!!</p>
             {:else}
               <p>i know your ass didnt just type a single character</p>
             {/if}
           </Tooltip.Content>
         </Tooltip.Root>
       </div>
 
       <div>
         <Tooltip.Root openDelay={50}>
           <Tooltip.Trigger asChild let:builder>
             <Button
               class="absolute bottom-[2%] left-[1%] z-30 rounded-full px-2 py-0 hover:text-ran_orange dark:bg-background dark:text-white dark:hover:text-ran_orange"
               variant="ghost"
               builders={[builder]}
               {disabled}
               on:click={handlePaperclipClick}
             >
               <IconPaperclip class="h-5 w-5" />
             </Button>
           </Tooltip.Trigger>
 
           <Tooltip.Content>
             <p>Upload docs or images to RAN</p>
           </Tooltip.Content>
         </Tooltip.Root>
       </div>
     </div>
   </div>
 
   <SearchSuggestions
     className="absolute w-full z-30 left-0 border rounded-sm bg-muted dark:bg-neutral-900"
     buttonClassName=""
     searchText={inputText}
     {suggestions}
     topX={topXSuggestions}
     isOpen={suggestionsOpen}
     enableTabCompletions={true}
     on:itemselect={(e) => {
       console.log("Selected suggestion: ", e.detail);
       inputText = e.detail;
     }}
     on:plsopenme={(e) => {
       openSuggestions();
     }}
     on:plscloseme={(e) => {
       closeSuggestions();
     }}
   />
 </div>
 
 <!-- File upload -->
 <input
   class="hidden"
   type="file"
   accept=".txt,.pdf,.epub,.docx,.doc,.odt,.jpg,.jpeg,.png,.avif,.bmp,.svg,.yaml,.yml,.json,.xlsx,.xls,.csv,.tsv,.ods"
   bind:this={fileInput}
   on:change={onAttachedFileChange}
 />
 
 <style>
   .searchbox {
     /* Aesthetics */
     @apply rounded-lg;
     @apply border-2 caret-ran_orange_light selection:bg-ran_orange_light placeholder:text-muted-foreground dark:border-[#3c3c3c] dark:bg-[#202020] dark:caret-ran_orange dark:selection:bg-ran_orange;
     @apply focus-visible:outline-none focus-visible:ring-transparent focus-visible:ring-offset-0 disabled:cursor-not-allowed disabled:opacity-50;
   }
 
   .expanding-textarea {
     @apply box-border overflow-x-hidden overflow-y-scroll;
     @apply px-4 py-3 leading-6 xl:text-lg;
 
     /* Custom Scrollbar */
     @apply scrollbar-thin scrollbar-track-transparent scrollbar-thumb-black/10 hover:scrollbar-thumb-black/20 dark:scrollbar-thumb-white/10 dark:hover:scrollbar-thumb-white/20;
 
     /* CHROMIUM ONLY (does not apply to firefox) */
     @apply scrollbar-track-rounded-full scrollbar-thumb-rounded-full scrollbar-w-[1px];
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/RANSearch/SearchSuggestions.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/Sidebar/LeftSidebar.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/Sidebar/components/Search.svelte [<script lang="ts">
   import { Input } from "@components/ui/input";
   import { IconX } from "@tabler/icons-svelte";
 
   export let placeholder = "Search...";
   export let searchTerm = "";
   export let onSearch: (searchTerm: string) => void = (term: string) => {};
 
   const handleSearchChange = (newvalue: string) => {
     onSearch(newvalue);
     console.log("changed search");
   };
 
   const clearSearch = () => {
     searchTerm = "";
     //onSearch("");
   };
 
   // On SearchTerm change
   $: {
     if (searchTerm) {
       handleSearchChange(searchTerm);
     }
   }
 </script>
 
 <div class="relative flex items-center">
   <Input
     class="w-full flex-1 rounded-md border dark:border-neutral-600 dark:bg-[#202123] px-4 py-3 pr-10 text-md leading-3 dark:text-white focus-visible:ring-transparent focus-visible:outline-none focus-visible:ring-offset-0"
     type="text"
     {placeholder}
     bind:value={searchTerm}
   />
 
   {#if searchTerm}
     <button type="button" on:click={clearSearch}>
       <IconX
         class="fixed right-[7.5%] top-[6.25rem] cursor-pointer text-neutral-300 hover:text-neutral-400 z-20"
         size={18}
       />
     </button>
   {/if}
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/Sidebar/components/SidebarExpandButton.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/Sidebar/stores.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/device/react/EXCLUSIVE.tsx []
/home/sanner/Coding/RAN/ran-app-native/src/components/device/svelte/EXCLUSIVE.svelte [<script lang="ts">
   import { type Device, PLATFORM } from "@config/platform";
   import { SCREEN_SIZES, SCREEN_SIZES_PX_MAP, type TW_SCREEN_SIZE } from "@data/client/screen";
   import { atom } from "nanostores";
   import { onMount } from "svelte";
   import Wrapper from "./_components/Wrapper.svelte";
 
   // Based on window size and device type
 
   // Conditions to show
   // NOTE: SIZES SPECIFIED IN AN ARRAY *MUST* be sorted from least to greatest
   export let OF: Device = "*";
   export let WHEN: TW_SCREEN_SIZE | TW_SCREEN_SIZE[] | "*" | string = "*"; // can also be like "<sm" or "<=sm" or ">sm" or ">=sm"
 
   // Used for debugging purposes
   export let NAME = "";
 
   let sizes: TW_SCREEN_SIZE[] = [];
 
   let isWindowSizeSatisfied = false;
   const isPlatformSatisfied = OF === "*" || PLATFORM.ID === "*" || PLATFORM.ID.startsWith(OF);
 
   let wrapperComponent;
   let key = false;
 
   $: showComponents = isPlatformSatisfied && isWindowSizeSatisfied;
   $: {
     if (showComponents) {
       //console.log("showing wrapper component: " + NAME);
       //console.log("_");
       key = true;
     } else {
       //console.log("destroying wrapper component: " + NAME);
       //console.log("_");
       //wrapperComponent.$destroy();
       key = false;
     }
   }
 
   function preprocessWhen(): TW_SCREEN_SIZE | TW_SCREEN_SIZE[] | "*" {
     if (WHEN === "*" || SCREEN_SIZES.includes(WHEN as TW_SCREEN_SIZE) || Array.isArray(WHEN)) {
       return WHEN;
     }
 
     // Otherwise, it's a string; we need to preprocess it
     const whenSizes: TW_SCREEN_SIZE[] = [];
     let anchor: TW_SCREEN_SIZE;
 
     const ineq: string = WHEN.charAt(0);
     const eq: boolean = WHEN.charAt(1) === "=";
     switch (ineq) {
       case "<": {
         if (eq) {
           // <=
           anchor = WHEN.substring(2);
         } else {
           // <
           anchor = WHEN.substring(1);
         }
 
         const anchorIndex = SCREEN_SIZES.indexOf(anchor);
         const lessThan: TW_SCREEN_SIZE[] = SCREEN_SIZES.slice(0, anchorIndex);
 
         if (eq) {
           whenSizes.push(...lessThan, anchor);
         } else {
           whenSizes.push(...lessThan);
         }
         break;
       }
       case ">": {
         if (eq) {
           // >=
           anchor = WHEN.substring(2);
           whenSizes.push(anchor);
         } else {
           // >
           anchor = WHEN.substring(1);
         }
 
         const anchorIndex = SCREEN_SIZES.indexOf(anchor);
         const greaterThan: TW_SCREEN_SIZE[] = SCREEN_SIZES.slice(anchorIndex + 1);
 
         whenSizes.push(...greaterThan);
         break;
       }
       default:
         throw new Error("Invalid size input");
     }
 
     return whenSizes;
   }
 
   //$ COMP_START
 
   // Returns a function to remove the event listener when needed
   function SPAWN_WINDOW_RESIZE_LISTENER_WEB(): () => void {
     const handleResize = () => {
       //console.log(sizes);
       const MAX_SIZE = 9999999999;
       for (let i = 0; i < sizes.length; ++i) {
         const size = sizes[i];
         const j = SCREEN_SIZES.indexOf(size);
 
         // [screenWidthLowerBound, screenWidthUpperBound)
         const screenWidthLowerBound: number = SCREEN_SIZES_PX_MAP.get(size);
 
         const isMax: boolean = j === SCREEN_SIZES.length - 1;
 
         const screenWidthUpperBound: number = isMax
           ? MAX_SIZE
           : SCREEN_SIZES_PX_MAP.get(SCREEN_SIZES[j + 1]);
 
         if (
           window.innerWidth >= screenWidthLowerBound &&
           window.innerWidth < screenWidthUpperBound
         ) {
           isWindowSizeSatisfied = true;
           return;
         }
       }
 
       isWindowSizeSatisfied = false;
     };
 
     handleResize();
 
     window.addEventListener("resize", handleResize);
 
     return () => {
       window.removeEventListener("resize", handleResize);
     };
   }
 
   // Returns a function to remove the event listener when needed
   function SPAWN_WINDOW_RESIZE_LISTENER_NATIVE(): () => void {
     // For now, do the same thing
     return SPAWN_WINDOW_RESIZE_LISTENER_WEB();
   }
 
   // Returns a function to remove the event listener when needed
   function SPAWN_WINDOW_RESIZE_LISTENER(): () => void {
     if (PLATFORM.MODE === "web") {
       return SPAWN_WINDOW_RESIZE_LISTENER_WEB();
     } else if (PLATFORM.MODE === "native") {
       return SPAWN_WINDOW_RESIZE_LISTENER_NATIVE();
     } else {
       throw new Error("Unknown platform");
     }
   }
 
   //$ COMP_END
 
   onMount(() => {
     WHEN = preprocessWhen();
     //console.log("WHEN: ", WHEN);
 
     if (WHEN === "*") {
       sizes = SCREEN_SIZES;
 
       // no event listener needed; can just set it to true
       isWindowSizeSatisfied = true;
     } else {
       // The screen size is specified
 
       if (SCREEN_SIZES.includes(WHEN as TW_SCREEN_SIZE)) {
         // "sm", "md", "lg", "xl", "2xl", ...
         sizes = [WHEN as TW_SCREEN_SIZE];
       } else {
         sizes = WHEN as TW_SCREEN_SIZE[];
       }
 
       //console.log("sizes: ", sizes);
 
       const removeEventListener = SPAWN_WINDOW_RESIZE_LISTENER();
       return removeEventListener;
     }
   });
 </script>
 
 {#key key}
   {#if showComponents}
     <Wrapper bind:this={wrapperComponent}>
       <slot />
     </Wrapper>
   {/if}
 {/key}
 
 <!--
 
 <EXCLUSIVE OF="web" client:load>
   <MySvelteComponent client:visible />
 </EXCLUSIVE>
 
 <EXCLUSIVE OF="web" WHEN="sm" client:load>
   <MySvelteComponent client:visible />
 </EXCLUSIVE>
 
 
 
 <EXCLUSIVE
   OF="web"
   WHEN={["sm", "md"]}
   client:load
 >
   <MySvelteComponent client:visible />
 </EXCLUSIVE>
 
 
 -->
]
/home/sanner/Coding/RAN/ran-app-native/src/components/device/svelte/_components/Wrapper.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/mobile/Header/MobileHeaderDropdown.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/CodeBlock/CodeBlock.svelte [<script lang="ts">
   import { IconCopy } from "@tabler/icons-svelte";
   import { createEventDispatcher } from "svelte";
 
   // Event Dispatcher
   type CodeBlockEvent = {
     copy: unknown;
   };
   const dispatch = createEventDispatcher<CodeBlockEvent>();
 
   // Types
   //import type { CssClasses } from '../../index.js';
 
 import { clipboard } from "@utils/actions/Clipboard/clipboard.js";
     import { storeHighlightJs } from "./stores.js";
 
   // Props
   /** Sets a language alias for Highlight.js syntax highlighting. */
   export let language = "plaintext";
   /** Provide the code snippet to render. Be mindful to escape as needed! */
   export let code = "";
 
   /** Specify if line numbers should be added to the code block*/
   export let lineNumbers = false;
 
   // Props (styles)
   /** Provide classes to set the background color. */
   export let background = "bg-supporting";
   /** Provided classes to set the backdrop blur. */
   export let blur = "";
   /** Provide classes to set the text size. */
   export let text = "text-md";
   /** Provide classes to set the text color. */
   export let color = "";
   /** Provide classes to set the border radius. */
   export let rounded = "rounded-container-token";
   /** Provide classes to set the box shadow. */
   export let shadow = "shadow";
   /** Provide classes to set the button styles. */
   export let button = "btn btn-sm variant-soft";
   /** Provide the button label text. */
   //export let buttonLabel = "Copy";
   /** Provide the button label text when copied. */
   export let buttonCopied = "✅";
 
   // Base Classes
   const cBase = "overflow-hidden shadow";
   const cHeader =
     "text-xs dark:text-white/50 uppercase flex justify-between items-center p-2 pl-4";
   const cPre = "whitespace-pre-wrap break-all p-4 pt-1";
 
   // Local
   let formatted = false;
   let displayCode: string = code;
   let copyState = false;
 
   // Allow shorthand alias, but show full text in UI
   function languageFormatter(lang: string): string {
     if (lang === "js") return "javascript";
     if (lang === "ts") return "typescript";
     if (lang === "py") return "python";
     if (lang === "shell") return "terminal";
     return lang;
   }
 
   // Handle Copy Text
   function onCopyClick() {
     copyState = true;
     // prettier-ignore
     setTimeout(() => { copyState = false; }, 2000);
     /** @event {} copy - Fires when the Copy button is pressed.  */
     dispatch("copy");
   }
 
   // Trigger syntax highlighting if highlight.js is available
   $: if ($storeHighlightJs !== undefined) {
     displayCode = $storeHighlightJs.highlight(code, { language }).value.trim();
     formatted = true;
   }
 
   $: if (lineNumbers) {
     displayCode = displayCode.replace(/^/gm, () => {
       return '<span class="line"></span>\t';
     });
     formatted = true;
   }
 
   // Reactive
   $: classesBase = `${cBase} ${background} ${blur} ${text} ${color} ${rounded} ${shadow} ${$$props.class ?? ""}`;
 </script>
 
 <!-- prettier-ignore -->
 {#if language && code}
 <div class="codeblock {classesBase}" data-testid="codeblock">
 	<!-- Header -->
 	<header class="codeblock-header {cHeader}">
 		<!-- Language -->
 		<span class="codeblock-language">{languageFormatter(language)}</span>
 		<!-- Copy Button -->
 		<button type="button" class="codeblock-btn {button}" on:click={onCopyClick} use:clipboard={code}>
       {#if !copyState}
         <IconCopy class="w-4 h-4"/>
       {:else}
         {buttonCopied}
       {/if}
 		</button>
 	</header>
 	<!-- Pre/Code -->
 	<pre class="codeblock-pre {cPre}"><code class="codeblock-code language-{language} lineNumbers">{#if formatted}{@html displayCode}{:else}{code.trim()}{/if}</code></pre>
 </div>
 {/if}
 
 <style>
   .codeblock-header {
     --tw-text-opacity: 1;
     color: rgb(139 139 139 / var(--tw-text-opacity));
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/CodeBlock/stores.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/GradientCard/GradientCard.svelte [<script lang="ts">
   import { cn } from "$lib/utils";
   import { Motion, useMotionTemplate, useMotionValue } from "svelte-motion";
 
   export let className: string | undefined = undefined;
 
   let mouseX = useMotionValue(0);
   let mouseY = useMotionValue(0);
 
   function onMouseMove({ currentTarget, clientX, clientY }: any) {
     let { left, top } = currentTarget.getBoundingClientRect();
     mouseX.set(clientX - left + 250);
     mouseY.set(clientY - top);
   }
 
   let maskImage = useMotionTemplate`radial-gradient(ellipse 100% 300px at ${mouseX}px ${mouseY}px, rgba(0,0,0,0.35), transparent)`;
   let style = { maskImage, WebkitMaskImage: maskImage };
 </script>
 
 <div
   class={cn(
     "aspect-square  relative flex  h-full w-full items-center justify-center bg-transparent p-0.5",
     className
   )}
 >
   <!-- svelte-ignore a11y-no-static-element-interactions -->
   <div
     on:mousemove={onMouseMove}
     class="group/card relative flex h-full w-full items-center justify-center overflow-hidden rounded-xl dark bg-background"
   >
     <div class="pointer-events-none">
       <div
         class="absolute inset-0 rounded-xl [mask-image:linear-gradient(white,transparent)] group-hover/card:opacity-50"
       ></div>
       <Motion let:motion {style}>
         <div
           use:motion
           class="absolute inset-0 rounded-xl bg-gradient-to-r from-[#171717] to-ran_orange_light opacity-0 backdrop-blur-xl transition duration-500 group-hover/card:opacity-100"
         />
       </Motion>
     </div>
 
     <!-- Container of the body -->
     <div class="z-10">
       <!-- THE BODY -->
       <div class="">
         <slot />
       </div>
     </div>
   </div>
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/GradientCard/Icon.svelte [<script lang="ts">
   export let className: string | undefined = undefined;
 </script>
 
 <svg
   xmlns="http://www.w3.org/2000/svg"
   fill="none"
   viewBox="0 0 24 24"
   stroke-width="1.5"
   stroke="currentColor"
   class={className}
   {...$$props}
 >
   <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v12m6-6H6" />
 </svg>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/GradientCard/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/HeroParallax/HeroParallax.svelte [<script lang="ts">
 	export let products: {
 		title: string;
 		link: string;
 		thumbnail: string;
 	}[];
 
 	import { Motion, useSpring, useTransform, useViewportScroll } from 'svelte-motion';
 	import ProductCard from './ProductCard.svelte';
 
 	const firstRow = products.slice(0, 5);
 	const secondRow = products.slice(5, 10);
 	const thirdRow = products.slice(10, 15);
 	let ref: HTMLDivElement | null = null;
 
 	const { scrollYProgress } = useViewportScroll();
 
 	const springConfig = { stiffness: 300, damping: 30, bounce: 100 };
 
 	const translateX = useSpring(useTransform(scrollYProgress, [0, 1], [0, 1000]), springConfig);
 	const translateXReverse = useSpring(
 		useTransform(scrollYProgress, [0, 1], [0, -1000]),
 		springConfig
 	);
 	const rotateX = useSpring(useTransform(scrollYProgress, [0, 0.2], [15, 0]), springConfig);
 	const opacity = useSpring(useTransform(scrollYProgress, [0, 0.2], [0.2, 1]), springConfig);
 	const rotateZ = useSpring(useTransform(scrollYProgress, [0, 0.2], [20, 0]), springConfig);
 	const translateY = useSpring(useTransform(scrollYProgress, [0, 0.2], [-700, 500]), springConfig);
 </script>
 
 <div
 	bind:this={ref}
 	class="relative flex h-[300vh] flex-col self-auto overflow-hidden py-4 antialiased [perspective:1000px] [transform-style:preserve-3d]"
 >
 	<div class="relative left-0 top-0 mx-auto w-full max-w-7xl px-4 py-8 md:py-4">
 		<h2 class="text-2xl font-bold dark:text-white md:text-7xl">
 			See What's New with <br /> UniverseLM
 		</h2>
 		<p class="mt-8 max-w-2xl text-base dark:text-neutral-200 md:text-xl">
 			UniverseLM is the single source of truth in this world.
 		</p>
 	</div>
 	<Motion
 		let:motion
 		style={{
 			rotateX,
 			rotateZ,
 			translateY,
 			opacity
 		}}
 	>
 		<div use:motion>
 			<Motion let:motion>
 				<div use:motion class="mb-20 flex flex-row-reverse space-x-20 space-x-reverse">
 					{#each firstRow as product (product.title)}
 						<ProductCard {product} translate={translateX} />
 					{/each}
 				</div>
 			</Motion>
 			<Motion let:motion>
 				<div use:motion class="mb-20 flex flex-row space-x-20">
 					{#each secondRow as product (product.title)}
 						<ProductCard {product} translate={translateXReverse} />
 					{/each}
 				</div>
 			</Motion>
 			<Motion let:motion>
 				<div use:motion class="flex flex-row-reverse space-x-20 space-x-reverse">
 					{#each thirdRow as product (product.title)}
 						<ProductCard {product} translate={translateX} />
 					{/each}
 				</div>
 			</Motion>
 		</div>
 	</Motion>
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/HeroParallax/ProductCard.svelte [<script lang="ts">
 	import { Motion, MotionValue } from 'svelte-motion';
 
 	export let product: {
 		title: string;
 		link: string;
 		thumbnail: string;
 	};
 	export let translate: MotionValue<number>;
 </script>
 
 <Motion
 	let:motion
 	style={{
 		x: translate
 	}}
 	whileHover={{
 		y: -20
 	}}
 >
 	<div use:motion class="group/product relative h-96 w-[30rem] flex-shrink-0">
 		<a href={product.link} class="block group-hover/product:shadow-2xl">
 			<img
 				src={product.thumbnail}
 				height="600"
 				width="600"
 				class="absolute inset-0 h-full w-full object-cover object-left-top"
 				alt={product.title}
 			/>
 		</a>
 		<div
 			class="pointer-events-none absolute inset-0 h-full w-full bg-black opacity-0 group-hover/product:opacity-80"
 		></div>
 		<h2 class="absolute bottom-4 left-4 text-white opacity-0 group-hover/product:opacity-100">
 			{product.title}
 		</h2>
 	</div>
 </Motion>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/HeroParallax/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/SignupForm/EmailInput.svelte [<script lang="ts">
   import { cn } from "$lib/utils";
   import {
     Motion,
     MotionValue,
     useMotionTemplate,
     useMotionValue,
   } from "svelte-motion";
 
   export let className: string | undefined = undefined;
   //export let type: string = 'text';
   export let value = "";
 
   let visible = false;
 
   let mouseX = useMotionValue(0);
   let mouseY = useMotionValue(0);
 
   function handleMouseMove({ currentTarget, clientX, clientY }: any) {
     let { left, top } = currentTarget.getBoundingClientRect();
 
     mouseX.set(clientX - left);
     mouseY.set(clientY - top);
   }
 </script>
 
 <Motion
   let:motion
   style={{
     background: visible
       ? useMotionTemplate`
   radial-gradient(
     100px circle at ${mouseX}px ${mouseY}px,
     var(--orange-600),
     transparent 80%
   )
 `
       : useMotionTemplate`
   radial-gradient(
     '0px' circle at ${mouseX}px ${mouseY}px,
     var(--orange-600),
     transparent 80%
   )
 `,
   }}
 >
   <div
     use:motion
     on:mousemove={handleMouseMove}
     on:mouseenter={() => (visible = true)}
     on:mouseleave={() => (visible = false)}
     class="group/input rounded-lg p-[2px] transition duration-300"
   >
     <input
       type="email"
       bind:value
       class={cn(
         `dark:placeholder-text-neutral-600 duration-400 flex h-10 w-full rounded-md border-none bg-gray-50 px-3 py-2 text-sm text-black shadow-input  transition file:border-0
         file:bg-transparent file:text-sm file:font-medium placeholder:text-neutral-400
         focus-visible:outline-none focus-visible:ring-[2px]  focus-visible:ring-neutral-400 disabled:cursor-not-allowed
          disabled:opacity-50 group-hover/input:shadow-none
          dark:bg-zinc-800
          dark:text-white dark:shadow-[0px_0px_1px_1px_var(--neutral-700)] dark:focus-visible:ring-neutral-600
          `,
         className
       )}
       {...$$restProps}
     />
   </div>
 </Motion>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/SignupForm/Input.svelte [<script lang="ts">
   import { cn } from "$lib/utils";
   import {
     Motion,
     MotionValue,
     useMotionTemplate,
     useMotionValue,
   } from "svelte-motion";
 
   export let className: string | undefined = undefined;
   //export let type: string = 'text';
   export let value = "";
 
   let visible = false;
 
   let mouseX = useMotionValue(0);
   let mouseY = useMotionValue(0);
 
   function handleMouseMove({ currentTarget, clientX, clientY }: any) {
     let { left, top } = currentTarget.getBoundingClientRect();
 
     mouseX.set(clientX - left);
     mouseY.set(clientY - top);
   }
 </script>
 
 <Motion
   let:motion
   style={{
     background: visible
       ? useMotionTemplate`
   radial-gradient(
     100px circle at ${mouseX}px ${mouseY}px,
     var(--orange-600),
     transparent 80%
   )
 `
       : useMotionTemplate`
   radial-gradient(
     '0px' circle at ${mouseX}px ${mouseY}px,
     var(--orange-600),
     transparent 80%
   )
 `,
   }}
 >
   <div
     use:motion
     on:mousemove={handleMouseMove}
     on:mouseenter={() => (visible = true)}
     on:mouseleave={() => (visible = false)}
     class="group/input rounded-lg p-[2px] transition duration-300"
   >
     <input
       type="text"
       bind:value
       class={cn(
         `dark:placeholder-text-neutral-600 duration-400 flex h-10 w-full rounded-md border-none bg-gray-50 px-3 py-2 text-sm text-black shadow-input  transition file:border-0
         file:bg-transparent file:text-sm file:font-medium placeholder:text-neutral-400
         focus-visible:outline-none focus-visible:ring-[2px]  focus-visible:ring-neutral-400 disabled:cursor-not-allowed
          disabled:opacity-50 group-hover/input:shadow-none
          dark:bg-zinc-800
          dark:text-white dark:shadow-[0px_0px_1px_1px_var(--neutral-700)] dark:focus-visible:ring-neutral-600
          `,
         className
       )}
       {...$$restProps}
     />
   </div>
 </Motion>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/SignupForm/Label.svelte [<script lang="ts">
   import { cn } from "$lib/utils";
 
   export let className: string | undefined = undefined;
 </script>
 
 <label
   class={cn(
     "text-sm font-medium leading-none text-black peer-disabled:cursor-not-allowed peer-disabled:opacity-70 dark:text-white",
     className
   )}
   {...$$restProps}
 >
   <slot />
 </label>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/SignupForm/TextArea.svelte [<script lang="ts">
   import { cn } from "$lib/utils";
   import {
     Motion,
     MotionValue,
     useMotionTemplate,
     useMotionValue,
   } from "svelte-motion";
 
   export let className: string | undefined = undefined;
   //export let type: string = 'text';
   export let value = "";
 
   let visible = false;
 
   let mouseX = useMotionValue(0);
   let mouseY = useMotionValue(0);
 
   function handleMouseMove({ currentTarget, clientX, clientY }: any) {
     let { left, top } = currentTarget.getBoundingClientRect();
 
     mouseX.set(clientX - left);
     mouseY.set(clientY - top);
   }
 </script>
 
 <Motion
   let:motion
   style={{
     background: visible
       ? useMotionTemplate`
   radial-gradient(
     100px circle at ${mouseX}px ${mouseY}px,
     var(--orange-600),
     transparent 80%
   )
 `
       : useMotionTemplate`
   radial-gradient(
     '0px' circle at ${mouseX}px ${mouseY}px,
     var(--orange-600),
     transparent 80%
   )
 `,
   }}
 >
   <div
     use:motion
     on:mousemove={handleMouseMove}
     on:mouseenter={() => (visible = true)}
     on:mouseleave={() => (visible = false)}
     class="group/input rounded-lg p-[2px] transition duration-300"
   >
     <textarea
       type="text"
       bind:value
       class={cn(
         `dark:placeholder-text-neutral-600 duration-400 flex h-10 w-full rounded-md border-none bg-gray-50 px-3 py-2 text-sm text-black shadow-input  transition file:border-0
         file:bg-transparent file:text-sm file:font-medium placeholder:text-neutral-400
         focus-visible:outline-none focus-visible:ring-[2px]  focus-visible:ring-neutral-400 disabled:cursor-not-allowed
          disabled:opacity-50 group-hover/input:shadow-none
          dark:bg-zinc-800
          dark:text-white dark:shadow-[0px_0px_1px_1px_var(--neutral-700)] dark:focus-visible:ring-neutral-600
          `,
         className
       )}
       {...$$restProps}
     />
   </div>
 </Motion>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/SignupForm/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/TextEditor/Tiptap.svelte [<script>
   import { Editor } from "@tiptap/core";
   import StarterKit from "@tiptap/starter-kit";
   import { onDestroy, onMount } from "svelte";
   import { writable } from "svelte/store";
 
   // @todo this throws a 'process is not defined' error in the Svelte REPL.
   // Uncomment the next line to see the REPL issue.
   // import BubbleMenu from '@tiptap/extension-bubble-menu'
   // import FixedMenu from './FixedMenu.svelte';
 
   export let content = "";
   export let className = "";
   export let innerClassName = "";
 
   export let contentStore;
 
   let element;
   let editor;
   //let bubbleMenu;
 
   let updateAsResultOfStoreChange = false;
   let updateStoreAsResultOfEditorChange = false;
 
   onMount(() => {
     editor = new Editor({
       element,
       extensions: [StarterKit],
       content,
       onTransaction: () => {
         editor = editor;
       },
     });
     editor.on("update", ({ editor }) => {
       if (!updateAsResultOfStoreChange) {
         console.log("editor html", editor.getHTML());
         updateStoreAsResultOfEditorChange = true;
         contentStore.set(editor.getHTML());
       }
 
       updateAsResultOfStoreChange = false;
     });
 
     contentStore.subscribe((value) => {
       if (!updateStoreAsResultOfEditorChange) {
         //console.log("contentStore changed");
         // Bring the editor into sync with the contentStore (the outside interface)
         updateAsResultOfStoreChange = true;
         editor.commands.setContent(value);
       }
 
       updateStoreAsResultOfEditorChange = false;
     });
   });
 
   onDestroy(() => {
     if (editor) {
       editor.destroy();
     }
   });
 </script>
 
 <div class={`wrapper ${className}`}>
   <div class={`element-wrapper ${innerClassName}`} bind:this={element} />
 </div>
 
 <style>
   .wrapper {
     border: 1px solid #ccc;
     max-height: 150px;
     display: inline-flex;
     flex-direction: column;
   }
 
   .wrapper:focus-within {
     border: 1px solid red;
   }
 
   .element-wrapper {
     padding: 1rem;
     flex: 1 1 0%;
     overflow: auto;
   }
 
   .element-wrapper :global(p:first-of-type) {
     margin-top: 0;
   }
 
   .element-wrapper :global(p:last-of-type) {
     margin-bottom: 0;
   }
 
   .element-wrapper > :global(.ProseMirror) {
     outline: 0;
   }
 
   .json-output,
   .html-output {
     max-height: 150px;
     overflow: hidden;
     overflow-y: auto;
     border: 1px solid #ccc;
   }
 </style>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/ThreeDCardEffect/CardBody.svelte [<script lang="ts">
   import { cn } from "$lib/utils";
 
   export let className: string;
 </script>
 
 <div
   class={cn(
     "[transform-style:preserve-3d]  [&>*]:[transform-style:preserve-3d]",
     className
   )}
 >
   <slot />
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/ThreeDCardEffect/CardContainer.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/ThreeDCardEffect/CardItem.svelte [<script lang="ts">
   import { cn } from "$lib/utils";
 
   export let className: string | undefined = undefined;
   export let translateX: number | string | undefined = 0;
   export let translateY: number | string | undefined = 0;
   export let translateZ: number | string | undefined = 0;
   export let rotateX: number | string | undefined = 0;
   export let rotateY: number | string | undefined = 0;
   export let rotateZ: number | string | undefined = 0;
   export let isMouseEntered = false;
 
   let ref: HTMLDivElement;
 
   $: isMouseEntered, handleAnimations();
 
   const handleAnimations = () => {
     if (!ref) return;
     if (isMouseEntered) {
       ref.style.transform = `translateX(${translateX}px) translateY(${translateY}px) translateZ(${translateZ}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) rotateZ(${rotateZ}deg)`;
     } else {
       ref.style.transform = `translateX(0px) translateY(0px) translateZ(0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg)`;
     }
   };
 </script>
 
 <div
   bind:this={ref}
   class={cn("transition duration-200 ease-linear", className)}
   {...$$props}
 >
   <slot />
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/ThreeDCardEffect/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/avatar/AvatarDisplay.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/avatar/avatar-fallback.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Avatar as AvatarPrimitive } from "bits-ui";
 
 	type $$Props = AvatarPrimitive.FallbackProps;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <AvatarPrimitive.Fallback
 	class={cn("bg-muted flex h-full w-full items-center justify-center rounded-full", className)}
 	{...$$restProps}
 >
 	<slot />
 </AvatarPrimitive.Fallback>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/avatar/avatar-image.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Avatar as AvatarPrimitive } from "bits-ui";
 
 	type $$Props = AvatarPrimitive.ImageProps;
 
 	let className: $$Props["class"] = undefined;
 	export let src: $$Props["src"] = undefined;
 	export let alt: $$Props["alt"] = undefined;
 	export { className as class };
 </script>
 
 <AvatarPrimitive.Image
 	{src}
 	{alt}
 	class={cn("aspect-square h-full w-full", className)}
 	{...$$restProps}
 />
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/avatar/avatar.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Avatar as AvatarPrimitive } from "bits-ui";
 
 	type $$Props = AvatarPrimitive.Props;
 
 	let className: $$Props["class"] = undefined;
 	export let delayMs: $$Props["delayMs"] = undefined;
 	export { className as class };
 </script>
 
 <AvatarPrimitive.Root
 	{delayMs}
 	class={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
 	{...$$restProps}
 >
 	<slot />
 </AvatarPrimitive.Root>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/avatar/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/avatarstack/AvatarStack.svelte [<script lang="ts">
   import * as Avatar from "$lib/components/ui/avatar";
   import * as HoverCard from "$lib/components/ui/hover-card/index.js";
   import { SITE } from "@config/siteconfig";
   import { type AvatarInput } from "./types";
 
   export let className = "";
 
   export let avatars: AvatarInput[] = [];
   export let maxShown = 2;
 
   let shownAvatars: AvatarInput[] = [];
 
   $: {
     if (avatars.length > maxShown) {
       shownAvatars = avatars.slice(0, maxShown);
 
       const fallbackString: string = `+${avatars.length - maxShown}`;
 
       // Designator for the rest
       shownAvatars.push({
         src: "",
         alt: fallbackString + " more",
         fallback: fallbackString,
         hoverable: false,
       });
     } else {
       shownAvatars = avatars;
     }
   }
 </script>
 
 <div class="group flex flex-row z-50" tabindex="-1">
   {#each shownAvatars as avatar}
     <div class="relative -mr-4">
       {#if avatar.hoverable}
         <HoverCard.Root>
           <HoverCard.Trigger
             href={avatar.link ?? "/"}
             target="_blank"
             rel="noopener"
             class=""
           >
             <Avatar.Root
               class={`relative !m-0 rounded-full object-cover object-top !p-0 hover:z-50 hover:shadow-sm hover:shadow-ran_orange_light ${className}`}
             >
               <Avatar.Image src={avatar.src} alt={avatar.alt} />
               <Avatar.Fallback>{avatar.fallback}</Avatar.Fallback>
             </Avatar.Root>
           </HoverCard.Trigger>
 
           <HoverCard.Content class="">
             <div class="flex items-center space-x-4">
               <Avatar.Root
                 class={`relative !m-0 rounded-full object-cover object-top !p-0 h-16 w-16`}
               >
                 <Avatar.Image src={avatar.src} alt={avatar.alt} />
                 <Avatar.Fallback>{avatar.fallback}</Avatar.Fallback>
               </Avatar.Root>
 
               <div class="space-y-0">
                 <a
                   class="text-lg font-bold hover:underline underline-offset-4"
                   href={avatar.link ?? "/"}
                   target="_blank"
                   rel="noopener"
                 >
                   {avatar.name ?? avatar.alt}
                 </a>
                 <p class="text-md">{avatar.subtitle ?? ""}</p>
               </div>
             </div>
           </HoverCard.Content>
         </HoverCard.Root>
       {:else}
         <!-- Just the plain avatar -->
         <Avatar.Root
           class={`relative !m-0 rounded-full object-cover object-top !p-0 ${className}`}
         >
           <Avatar.Image src={avatar.src} alt={avatar.alt} />
           <Avatar.Fallback>{avatar.fallback}</Avatar.Fallback>
         </Avatar.Root>
       {/if}
     </div>
   {/each}
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/avatarstack/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/avatarstack/types.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/button/LoadableButton.svelte [<script lang="ts">
   import { cn } from "$lib/utils/cn.ts";
   import { Button as ButtonPrimitive } from "bits-ui";
   import LoaderCircle from "lucide-svelte/icons/loader-circle";
   import { type Events, type Props, buttonVariants } from "./index.ts";
 
   type $$Props = Props & {
     isLoading?: boolean;
     loadingText?: string;
   };
 
   type $$Events = Events;
 
   let className: $$Props["class"] = undefined;
   export let variant: $$Props["variant"] = "default";
   export let size: $$Props["size"] = "default";
   export let builders: $$Props["builders"] = [];
   export let isLoading: $$Props["isLoading"] = false;
   export let loadingText: $$Props["loadingText"] = "Please wait";
   export { className as class };
 </script>
 
 <div>
   {#if isLoading}
     <ButtonPrimitive.Root
       {builders}
       class={cn(buttonVariants({ variant, size, className }))}
       type="button"
       disabled
       {...$$restProps}
       on:click
       on:keydown
     >
       <LoaderCircle class="mr-2 h-4 w-4 animate-spin" />
       {loadingText}
     </ButtonPrimitive.Root>
   {:else}
     <ButtonPrimitive.Root
       {builders}
       class={cn(buttonVariants({ variant, size, className }))}
       type="button"
       {...$$restProps}
       on:click
       on:keydown
     >
       <slot />
     </ButtonPrimitive.Root>
   {/if}
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/button/button.svelte [<script lang="ts">
 	import { cn } from "$lib/utils/cn.ts";
 	import { Button as ButtonPrimitive } from "bits-ui";
 	import { type Events, type Props, buttonVariants } from "./index.js";
 
 	type $$Props = Props;
 	type $$Events = Events;
 
 	let className: $$Props["class"] = undefined;
 	export let variant: $$Props["variant"] = "default";
 	export let size: $$Props["size"] = "default";
 	export let builders: $$Props["builders"] = [];
 	export { className as class };
 </script>
 
 <ButtonPrimitive.Root
 	{builders}
 	class={cn(buttonVariants({ variant, size, className }))}
 	type="button"
 	{...$$restProps}
 	on:click
 	on:keydown
 >
 	<slot />
 </ButtonPrimitive.Root>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/button/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/calendar/calendar-cell.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Calendar as CalendarPrimitive } from "bits-ui";
 
 	type $$Props = CalendarPrimitive.CellProps;
 
 	export let date: $$Props["date"];
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <CalendarPrimitive.Cell
 	{date}
 	class={cn(
 		"relative h-9 w-9 p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([data-selected])]:rounded-md [&:has([data-selected])]:bg-accent [&:has([data-selected][data-outside-month])]:bg-accent/50",
 		className
 	)}
 	{...$$restProps}
 >
 	<slot />
 </CalendarPrimitive.Cell>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/calendar/calendar-day.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/calendar/calendar-grid-body.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Calendar as CalendarPrimitive } from "bits-ui";
 
 	type $$Props = CalendarPrimitive.GridBodyProps;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <CalendarPrimitive.GridBody class={cn(className)} {...$$restProps}>
 	<slot />
 </CalendarPrimitive.GridBody>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/calendar/calendar-grid-head.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Calendar as CalendarPrimitive } from "bits-ui";
 
 	type $$Props = CalendarPrimitive.GridHeadProps;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <CalendarPrimitive.GridHead class={cn(className)} {...$$restProps}>
 	<slot />
 </CalendarPrimitive.GridHead>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/calendar/calendar-grid-row.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Calendar as CalendarPrimitive } from "bits-ui";
 
 	type $$Props = CalendarPrimitive.GridRowProps;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <CalendarPrimitive.GridRow class={cn("flex", className)} {...$$restProps}>
 	<slot />
 </CalendarPrimitive.GridRow>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/calendar/calendar-grid.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Calendar as CalendarPrimitive } from "bits-ui";
 
 	type $$Props = CalendarPrimitive.GridProps;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <CalendarPrimitive.Grid class={cn("w-full border-collapse space-y-1", className)} {...$$restProps}>
 	<slot />
 </CalendarPrimitive.Grid>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/calendar/calendar-head-cell.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Calendar as CalendarPrimitive } from "bits-ui";
 
 	type $$Props = CalendarPrimitive.HeadCellProps;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <CalendarPrimitive.HeadCell
 	class={cn("w-9 rounded-md text-[0.8rem] font-normal text-muted-foreground", className)}
 	{...$$restProps}
 >
 	<slot />
 </CalendarPrimitive.HeadCell>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/calendar/calendar-header.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Calendar as CalendarPrimitive } from "bits-ui";
 
 	type $$Props = CalendarPrimitive.HeaderProps;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <CalendarPrimitive.Header
 	class={cn("relative flex w-full items-center justify-between pt-1", className)}
 	{...$$restProps}
 >
 	<slot />
 </CalendarPrimitive.Header>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/calendar/calendar-heading.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/calendar/calendar-months.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLAttributes } from "svelte/elements";
 
 	type $$Props = HTMLAttributes<HTMLDivElement>;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <div
 	class={cn("mt-4 flex flex-col space-y-4 sm:flex-row sm:space-x-4 sm:space-y-0", className)}
 	{...$$restProps}
 >
 	<slot />
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/calendar/calendar-next-button.svelte [<script lang="ts">
 	import { buttonVariants } from "$lib/components/ui/button/index.js";
 	import { cn } from "$lib/utils.js";
 	import { Calendar as CalendarPrimitive } from "bits-ui";
 	import ChevronRight from "lucide-svelte/icons/chevron-right";
 
 	type $$Props = CalendarPrimitive.NextButtonProps;
 	type $$Events = CalendarPrimitive.NextButtonEvents;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <CalendarPrimitive.NextButton
 	on:click
 	class={cn(
 		buttonVariants({ variant: "outline" }),
 		"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100",
 		className
 	)}
 	{...$$restProps}
 	let:builder
 >
 	<slot {builder}>
 		<ChevronRight class="h-4 w-4" />
 	</slot>
 </CalendarPrimitive.NextButton>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/calendar/calendar-prev-button.svelte [<script lang="ts">
 	import { buttonVariants } from "$lib/components/ui/button/index.js";
 	import { cn } from "$lib/utils.js";
 	import { Calendar as CalendarPrimitive } from "bits-ui";
 	import ChevronLeft from "lucide-svelte/icons/chevron-left";
 
 	type $$Props = CalendarPrimitive.PrevButtonProps;
 	type $$Events = CalendarPrimitive.PrevButtonEvents;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <CalendarPrimitive.PrevButton
 	on:click
 	class={cn(
 		buttonVariants({ variant: "outline" }),
 		"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100",
 		className
 	)}
 	{...$$restProps}
 	let:builder
 >
 	<slot {builder}>
 		<ChevronLeft class="h-4 w-4" />
 	</slot>
 </CalendarPrimitive.PrevButton>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/calendar/calendar.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/calendar/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/card/card-content.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLAttributes } from "svelte/elements";
 
 	type $$Props = HTMLAttributes<HTMLDivElement>;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <div class={cn("p-6 pt-0", className)} {...$$restProps}>
 	<slot />
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/card/card-description.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLAttributes } from "svelte/elements";
 
 	type $$Props = HTMLAttributes<HTMLParagraphElement>;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <p class={cn("text-sm text-muted-foreground", className)} {...$$restProps}>
 	<slot />
 </p>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/card/card-footer.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLAttributes } from "svelte/elements";
 
 	type $$Props = HTMLAttributes<HTMLDivElement>;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <div class={cn("flex items-center p-6 pt-0", className)} {...$$restProps}>
 	<slot />
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/card/card-header.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLAttributes } from "svelte/elements";
 
 	type $$Props = HTMLAttributes<HTMLDivElement>;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <div class={cn("flex flex-col space-y-1.5 p-6", className)} {...$$restProps}>
 	<slot />
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/card/card-title.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLAttributes } from "svelte/elements";
 	import type { HeadingLevel } from "./index.js";
 
 	type $$Props = HTMLAttributes<HTMLHeadingElement> & {
 		tag?: HeadingLevel;
 	};
 
 	let className: $$Props["class"] = undefined;
 	export let tag: $$Props["tag"] = "h3";
 	export { className as class };
 </script>
 
 <svelte:element
 	this={tag}
 	class={cn("text-lg font-semibold leading-none tracking-tight", className)}
 	{...$$restProps}
 >
 	<slot />
 </svelte:element>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/card/card.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLAttributes } from "svelte/elements";
 
 	type $$Props = HTMLAttributes<HTMLDivElement>;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <div
 	class={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)}
 	{...$$restProps}
 >
 	<slot />
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/card/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/checkbox/checkbox.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/checkbox/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/collapsible/collapsible-content.svelte [<script lang="ts">
 	import { Collapsible as CollapsiblePrimitive } from "bits-ui";
 	import { slide } from "svelte/transition";
 
 	type $$Props = CollapsiblePrimitive.ContentProps;
 
 	export let transition: $$Props["transition"] = slide;
 	export let transitionConfig: $$Props["transitionConfig"] = {
 		duration: 150,
 	};
 </script>
 
 <CollapsiblePrimitive.Content {transition} {transitionConfig} {...$$restProps}>
 	<slot />
 </CollapsiblePrimitive.Content>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/collapsible/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dialog/dialog-content.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dialog/dialog-description.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Dialog as DialogPrimitive } from "bits-ui";
 
 	type $$Props = DialogPrimitive.DescriptionProps;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <DialogPrimitive.Description
 	class={cn("text-sm text-muted-foreground", className)}
 	{...$$restProps}
 >
 	<slot />
 </DialogPrimitive.Description>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dialog/dialog-footer.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLAttributes } from "svelte/elements";
 
 	type $$Props = HTMLAttributes<HTMLDivElement>;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 
 <div
 	class={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
 	{...$$restProps}
 >
 	<slot />
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dialog/dialog-header.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLAttributes } from "svelte/elements";
 
 	type $$Props = HTMLAttributes<HTMLDivElement>;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <div class={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)} {...$$restProps}>
 	<slot />
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dialog/dialog-overlay.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Dialog as DialogPrimitive } from "bits-ui";
 	import { fade } from "svelte/transition";
 
 	type $$Props = DialogPrimitive.OverlayProps;
 
 	let className: $$Props["class"] = undefined;
 	export let transition: $$Props["transition"] = fade;
 	export let transitionConfig: $$Props["transitionConfig"] = {
 		duration: 150,
 	};
 	export { className as class };
 </script>
 
 <DialogPrimitive.Overlay
 	{transition}
 	{transitionConfig}
 	class={cn("fixed inset-0 z-50 bg-background/80 backdrop-blur-sm", className)}
 	{...$$restProps}
 />
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dialog/dialog-portal.svelte [<script lang="ts">
 	import { Dialog as DialogPrimitive } from "bits-ui";
 	type $$Props = DialogPrimitive.PortalProps;
 </script>
 
 <DialogPrimitive.Portal {...$$restProps}>
 	<slot />
 </DialogPrimitive.Portal>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dialog/dialog-title.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Dialog as DialogPrimitive } from "bits-ui";
 
 	type $$Props = DialogPrimitive.TitleProps;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <DialogPrimitive.Title
 	class={cn("text-lg font-semibold leading-none tracking-tight", className)}
 	{...$$restProps}
 >
 	<slot />
 </DialogPrimitive.Title>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dialog/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dropdown-menu/dropdown-menu-checkbox-item.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dropdown-menu/dropdown-menu-content.svelte [<script lang="ts">
 	import { cn, flyAndScale } from "$lib/utils.js";
 	import { DropdownMenu as DropdownMenuPrimitive } from "bits-ui";
 
 	type $$Props = DropdownMenuPrimitive.ContentProps;
 	type $$Events = DropdownMenuPrimitive.ContentEvents;
 
 	let className: $$Props["class"] = undefined;
 	export let sideOffset: $$Props["sideOffset"] = 4;
 	export let transition: $$Props["transition"] = flyAndScale;
 	export let transitionConfig: $$Props["transitionConfig"] = undefined;
 	export { className as class };
 </script>
 
 <DropdownMenuPrimitive.Content
 	{transition}
 	{transitionConfig}
 	{sideOffset}
 	class={cn(
 		"bg-popover text-popover-foreground z-50 min-w-[8rem] rounded-md border p-1 shadow-md focus:outline-none",
 		className
 	)}
 	{...$$restProps}
 	on:keydown
 >
 	<slot />
 </DropdownMenuPrimitive.Content>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dropdown-menu/dropdown-menu-item.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { DropdownMenu as DropdownMenuPrimitive } from "bits-ui";
 
 	type $$Props = DropdownMenuPrimitive.ItemProps & {
 		inset?: boolean;
 	};
 	type $$Events = DropdownMenuPrimitive.ItemEvents;
 
 	let className: $$Props["class"] = undefined;
 	export let inset: $$Props["inset"] = undefined;
 	export { className as class };
 </script>
 
 <DropdownMenuPrimitive.Item
 	class={cn(
 		"data-[highlighted]:bg-accent data-[highlighted]:text-accent-foreground relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
 		inset && "pl-8",
 		className
 	)}
 	{...$$restProps}
 	on:click
 	on:keydown
 	on:focusin
 	on:focusout
 	on:pointerdown
 	on:pointerleave
 	on:pointermove
 >
 	<slot />
 </DropdownMenuPrimitive.Item>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dropdown-menu/dropdown-menu-label.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { DropdownMenu as DropdownMenuPrimitive } from "bits-ui";
 
 	type $$Props = DropdownMenuPrimitive.LabelProps & {
 		inset?: boolean;
 	};
 
 	let className: $$Props["class"] = undefined;
 	export let inset: $$Props["inset"] = undefined;
 	export { className as class };
 </script>
 
 <DropdownMenuPrimitive.Label
 	class={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
 	{...$$restProps}
 >
 	<slot />
 </DropdownMenuPrimitive.Label>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dropdown-menu/dropdown-menu-radio-group.svelte [<script lang="ts">
 	import { DropdownMenu as DropdownMenuPrimitive } from "bits-ui";
 
 	type $$Props = DropdownMenuPrimitive.RadioGroupProps;
 
 	export let value: $$Props["value"] = undefined;
 </script>
 
 <DropdownMenuPrimitive.RadioGroup {...$$restProps} bind:value>
 	<slot />
 </DropdownMenuPrimitive.RadioGroup>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dropdown-menu/dropdown-menu-radio-item.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dropdown-menu/dropdown-menu-separator.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { DropdownMenu as DropdownMenuPrimitive } from "bits-ui";
 
 	type $$Props = DropdownMenuPrimitive.SeparatorProps;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <DropdownMenuPrimitive.Separator
 	class={cn("bg-muted -mx-1 my-1 h-px", className)}
 	{...$$restProps}
 />
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dropdown-menu/dropdown-menu-shortcut.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLAttributes } from "svelte/elements";
 
 	type $$Props = HTMLAttributes<HTMLSpanElement>;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <span class={cn("ml-auto text-xs tracking-widest opacity-60", className)} {...$$restProps}>
 	<slot />
 </span>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dropdown-menu/dropdown-menu-sub-content.svelte [<script lang="ts">
 	import { cn, flyAndScale } from "$lib/utils.js";
 	import { DropdownMenu as DropdownMenuPrimitive } from "bits-ui";
 
 	type $$Props = DropdownMenuPrimitive.SubContentProps;
 	type $$Events = DropdownMenuPrimitive.SubContentEvents;
 
 	let className: $$Props["class"] = undefined;
 	export let transition: $$Props["transition"] = flyAndScale;
 	export let transitionConfig: $$Props["transitionConfig"] = {
 		x: -10,
 		y: 0,
 	};
 	export { className as class };
 </script>
 
 <DropdownMenuPrimitive.SubContent
 	{transition}
 	{transitionConfig}
 	class={cn(
 		"bg-popover text-popover-foreground z-50 min-w-[8rem] rounded-md border p-1 shadow-lg focus:outline-none",
 		className
 	)}
 	{...$$restProps}
 	on:keydown
 	on:focusout
 	on:pointermove
 >
 	<slot />
 </DropdownMenuPrimitive.SubContent>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dropdown-menu/dropdown-menu-sub-trigger.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/dropdown-menu/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/feedback.tsx []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/form/form-button.svelte [<script lang="ts">
 	import * as Button from "$lib/components/ui/button/index.js";
 
 	type $$Props = Button.Props;
 	type $$Events = Button.Events;
 </script>
 
 <Button.Root type="submit" on:click on:keydown {...$$restProps}>
 	<slot />
 </Button.Root>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/form/form-description.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import * as FormPrimitive from "formsnap";
 	import type { HTMLAttributes } from "svelte/elements";
 
 	type $$Props = HTMLAttributes<HTMLSpanElement>;
 	let className: string | undefined | null = undefined;
 	export { className as class };
 </script>
 
 <FormPrimitive.Description
 	class={cn("text-sm text-muted-foreground", className)}
 	{...$$restProps}
 	let:descriptionAttrs
 >
 	<slot {descriptionAttrs} />
 </FormPrimitive.Description>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/form/form-element-field.svelte [<script lang="ts" context="module">
 	import type { FormPathLeaves, SuperForm } from "sveltekit-superforms";
 	type T = Record<string, unknown>;
 	type U = FormPathLeaves<T>;
 </script>
 
 <script lang="ts" generics="T extends Record<string, unknown>, U extends FormPathLeaves<T>">
 	import type { HTMLAttributes } from "svelte/elements";
 	import * as FormPrimitive from "formsnap";
 	import { cn } from "$lib/utils.js";
 
 	type $$Props = FormPrimitive.ElementFieldProps<T, U> & HTMLAttributes<HTMLElement>;
 
 	export let form: SuperForm<T>;
 	export let name: U;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <FormPrimitive.ElementField {form} {name} let:constraints let:errors let:tainted let:value>
 	<div class={cn("space-y-2", className)}>
 		<slot {constraints} {errors} {tainted} {value} />
 	</div>
 </FormPrimitive.ElementField>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/form/form-field-errors.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/form/form-field.svelte [<script lang="ts" context="module">
 	import type { FormPath, SuperForm } from "sveltekit-superforms";
 	type T = Record<string, unknown>;
 	type U = FormPath<T>;
 </script>
 
 <script lang="ts" generics="T extends Record<string, unknown>, U extends FormPath<T>">
 	import type { HTMLAttributes } from "svelte/elements";
 	import * as FormPrimitive from "formsnap";
 	import { cn } from "$lib/utils.js";
 
 	type $$Props = FormPrimitive.FieldProps<T, U> & HTMLAttributes<HTMLElement>;
 
 	export let form: SuperForm<T>;
 	export let name: U;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <FormPrimitive.Field {form} {name} let:constraints let:errors let:tainted let:value>
 	<div class={cn("space-y-2", className)}>
 		<slot {constraints} {errors} {tainted} {value} />
 	</div>
 </FormPrimitive.Field>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/form/form-fieldset.svelte [<script lang="ts" context="module">
 	import type { FormPath, SuperForm } from "sveltekit-superforms";
 	type T = Record<string, unknown>;
 	type U = FormPath<T>;
 </script>
 
 <script lang="ts" generics="T extends Record<string, unknown>, U extends FormPath<T>">
 	import * as FormPrimitive from "formsnap";
 	import { cn } from "$lib/utils.js";
 
 	type $$Props = FormPrimitive.FieldsetProps<T, U>;
 
 	export let form: SuperForm<T>;
 	export let name: U;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <FormPrimitive.Fieldset
 	{form}
 	{name}
 	let:constraints
 	let:errors
 	let:tainted
 	let:value
 	class={cn("space-y-2", className)}
 >
 	<slot {constraints} {errors} {tainted} {value} />
 </FormPrimitive.Fieldset>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/form/form-label.svelte [<script lang="ts">
 	import { Label } from "$lib/components/ui/label/index.js";
 	import { cn } from "$lib/utils.js";
 	import type { Label as LabelPrimitive } from "bits-ui";
 	import { getFormControl } from "formsnap";
 
 	type $$Props = LabelPrimitive.Props;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 
 	const { labelAttrs } = getFormControl();
 </script>
 
 <Label {...$labelAttrs} class={cn("data-[fs-error]:text-destructive", className)} {...$$restProps}>
 	<slot {labelAttrs} />
 </Label>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/form/form-legend.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import * as FormPrimitive from "formsnap";
 
 	type $$Props = FormPrimitive.LegendProps;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <FormPrimitive.Legend
 	{...$$restProps}
 	class={cn("text-sm font-medium leading-none data-[fs-error]:text-destructive", className)}
 	let:legendAttrs
 >
 	<slot {legendAttrs} />
 </FormPrimitive.Legend>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/form/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/hover-card/hover-card-content.svelte [<script lang="ts">
 	import { cn, flyAndScale } from "$lib/utils.js";
 	import { LinkPreview as HoverCardPrimitive } from "bits-ui";
 
 	type $$Props = HoverCardPrimitive.ContentProps;
 
 	let className: $$Props["class"] = undefined;
 	export let transition: $$Props["transition"] = flyAndScale;
 	export let transitionConfig: $$Props["transitionConfig"] = undefined;
 	export let align: $$Props["align"] = "center";
 	export let sideOffset: $$Props["sideOffset"] = 4;
 	export { className as class };
 </script>
 
 <HoverCardPrimitive.Content
 	{transition}
 	{transitionConfig}
 	{align}
 	{sideOffset}
 	class={cn(
 		"bg-popover text-popover-foreground z-50 mt-3 w-64 rounded-md border p-4 shadow-md outline-none",
 		className
 	)}
 	{...$$restProps}
 >
 	<slot />
 </HoverCardPrimitive.Content>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/hover-card/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/input/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/input/input.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLInputAttributes } from "svelte/elements";
 	import type { InputEvents } from "./index.js";
 
 	type $$Props = HTMLInputAttributes;
 	type $$Events = InputEvents;
 
 	let className: $$Props["class"] = undefined;
 	export let value: $$Props["value"] = undefined;
 	export { className as class };
 
 	// Workaround for https://github.com/sveltejs/svelte/issues/9305
 	// Fixed in Svelte 5, but not backported to 4.x.
 	export let readonly: $$Props["readonly"] = undefined;
 </script>
 
 <input
 	class={cn(
 		"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
 		className
 	)}
 	bind:value
 	{readonly}
 	on:blur
 	on:change
 	on:click
 	on:focus
 	on:focusin
 	on:focusout
 	on:keydown
 	on:keypress
 	on:keyup
 	on:mouseover
 	on:mouseenter
 	on:mouseleave
 	on:mousemove
 	on:paste
 	on:input
 	on:wheel|passive
 	{...$$restProps}
 />
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/label/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/label/label.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Label as LabelPrimitive } from "bits-ui";
 
 	type $$Props = LabelPrimitive.Props;
 	type $$Events = LabelPrimitive.Events;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <LabelPrimitive.Root
 	class={cn(
 		"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
 		className
 	)}
 	{...$$restProps}
 	on:mousedown
 >
 	<slot />
 </LabelPrimitive.Root>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/popover/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/popover/popover-content.svelte [<script lang="ts">
   import { cn, flyAndScale } from "$lib/utils.js";
   import { Popover as PopoverPrimitive } from "bits-ui";
 
   type $$Props = PopoverPrimitive.ContentProps;
   let className: $$Props["class"] = undefined;
   export let transition: $$Props["transition"] = flyAndScale;
   export let transitionConfig: $$Props["transitionConfig"] = undefined;
   export { className as class };
 </script>
 
 <PopoverPrimitive.Content
   {transition}
   {transitionConfig}
   class={cn(
     "bg-popover text-popover-foreground z-50 w-72 rounded-md border p-4 shadow-md outline-none",
     className
   )}
   {...$$restProps}
 >
   <slot />
 </PopoverPrimitive.Content>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/progress/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/progress/progress.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/radio-group/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/radio-group/radio-group-item.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { RadioGroup as RadioGroupPrimitive } from "bits-ui";
 	import Circle from "lucide-svelte/icons/circle";
 
 	type $$Props = RadioGroupPrimitive.ItemProps;
 	type $$Events = RadioGroupPrimitive.ItemEvents;
 
 	let className: $$Props["class"] = undefined;
 	export let value: $$Props["value"];
 	export { className as class };
 </script>
 
 <RadioGroupPrimitive.Item
 	{value}
 	class={cn(
 		"border-primary text-primary ring-offset-background focus-visible:ring-ring aspect-square h-4 w-4 rounded-full border focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
 		className
 	)}
 	{...$$restProps}
 	on:click
 >
 	<div class="flex items-center justify-center">
 		<RadioGroupPrimitive.ItemIndicator>
 			<Circle class="h-2.5 w-2.5 fill-current text-current" />
 		</RadioGroupPrimitive.ItemIndicator>
 	</div>
 </RadioGroupPrimitive.Item>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/radio-group/radio-group.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { RadioGroup as RadioGroupPrimitive } from "bits-ui";
 
 	type $$Props = RadioGroupPrimitive.Props;
 
 	let className: $$Props["class"] = undefined;
 	export let value: $$Props["value"] = undefined;
 	export { className as class };
 </script>
 
 <RadioGroupPrimitive.Root bind:value class={cn("grid gap-2", className)} {...$$restProps}>
 	<slot />
 </RadioGroupPrimitive.Root>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/react-button/button.tsx []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/react-card/card.tsx []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/react-command/Command.tsx []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/react-dialog/dialog.tsx []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/react-separator/Separator.tsx []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/react-tabs/tabs.tsx []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/scroll-area/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/scroll-area/scroll-area-scrollbar.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/scroll-area/scroll-area.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/select/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/select/select-content.svelte [<script lang="ts">
   import { cn, flyAndScale } from "$lib/utils.js";
   import { Select as SelectPrimitive } from "bits-ui";
   import { scale } from "svelte/transition";
 
   type $$Props = SelectPrimitive.ContentProps;
   type $$Events = SelectPrimitive.ContentEvents;
 
   export let sideOffset: $$Props["sideOffset"] = 4;
   export let inTransition: $$Props["inTransition"] = flyAndScale;
   export let inTransitionConfig: $$Props["inTransitionConfig"] = undefined;
   export let outTransition: $$Props["outTransition"] = scale;
   export let outTransitionConfig: $$Props["outTransitionConfig"] = {
     start: 0.95,
     opacity: 0,
     duration: 50,
   };
 
   let className: $$Props["class"] = undefined;
   export { className as class };
 </script>
 
 <SelectPrimitive.Content
   {inTransition}
   {inTransitionConfig}
   {outTransition}
   {outTransitionConfig}
   {sideOffset}
   class={cn(
     "bg-popover text-popover-foreground relative z-50 min-w-[8rem] overflow-hidden rounded-md border shadow-md outline-none",
     className
   )}
   {...$$restProps}
   on:keydown
 >
   <div class="w-full p-1">
     <slot />
   </div>
 </SelectPrimitive.Content>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/select/select-item.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/select/select-label.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Select as SelectPrimitive } from "bits-ui";
 
 	type $$Props = SelectPrimitive.LabelProps;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <SelectPrimitive.Label
 	class={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
 	{...$$restProps}
 >
 	<slot />
 </SelectPrimitive.Label>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/select/select-separator.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Select as SelectPrimitive } from "bits-ui";
 
 	type $$Props = SelectPrimitive.SeparatorProps;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <SelectPrimitive.Separator class={cn("bg-muted -mx-1 my-1 h-px", className)} {...$$restProps} />
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/select/select-trigger.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/separator/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/separator/separator.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Separator as SeparatorPrimitive } from "bits-ui";
 
 	type $$Props = SeparatorPrimitive.Props;
 
 	let className: $$Props["class"] = undefined;
 	export let orientation: $$Props["orientation"] = "horizontal";
 	export let decorative: $$Props["decorative"] = undefined;
 	export { className as class };
 </script>
 
 <SeparatorPrimitive.Root
 	class={cn(
 		"shrink-0 bg-border",
 		orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
 		className
 	)}
 	{orientation}
 	{decorative}
 	{...$$restProps}
 />
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/subscribe-button.tsx []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/switch/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/switch/switch.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/table/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/table/table-body.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLAttributes } from "svelte/elements";
 
 	type $$Props = HTMLAttributes<HTMLTableSectionElement>;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <tbody class={cn("[&_tr:last-child]:border-0", className)} {...$$restProps}>
 	<slot />
 </tbody>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/table/table-caption.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLAttributes } from "svelte/elements";
 
 	type $$Props = HTMLAttributes<HTMLTableCaptionElement>;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <caption class={cn("mt-4 text-sm text-muted-foreground", className)} {...$$restProps}>
 	<slot />
 </caption>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/table/table-cell.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLTdAttributes } from "svelte/elements";
 
 	type $$Props = HTMLTdAttributes;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <td
 	class={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
 	{...$$restProps}
 	on:click
 	on:keydown
 >
 	<slot />
 </td>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/table/table-footer.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLAttributes } from "svelte/elements";
 
 	type $$Props = HTMLAttributes<HTMLTableSectionElement>;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <tfoot class={cn("bg-primary font-medium text-primary-foreground", className)} {...$$restProps}>
 	<slot />
 </tfoot>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/table/table-head.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLThAttributes } from "svelte/elements";
 
 	type $$Props = HTMLThAttributes;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <th
 	class={cn(
 		"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
 		className
 	)}
 	{...$$restProps}
 >
 	<slot />
 </th>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/table/table-header.svelte []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/table/table-row.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLAttributes } from "svelte/elements";
 
 	type $$Props = HTMLAttributes<HTMLTableRowElement> & {
 		"data-state"?: unknown;
 	};
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <tr
 	class={cn(
 		"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
 		className
 	)}
 	{...$$restProps}
 	on:click
 	on:keydown
 >
 	<slot />
 </tr>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/table/table.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import type { HTMLTableAttributes } from "svelte/elements";
 
 	type $$Props = HTMLTableAttributes;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <div class="relative w-full overflow-auto">
 	<table class={cn("w-full caption-bottom text-sm", className)} {...$$restProps}>
 		<slot />
 	</table>
 </div>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/tabs/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/tabs/tabs-content.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Tabs as TabsPrimitive } from "bits-ui";
 
 	type $$Props = TabsPrimitive.ContentProps;
 
 	let className: $$Props["class"] = undefined;
 	export let value: $$Props["value"];
 	export { className as class };
 </script>
 
 <TabsPrimitive.Content
 	class={cn(
 		"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
 		className
 	)}
 	{value}
 	{...$$restProps}
 >
 	<slot />
 </TabsPrimitive.Content>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/tabs/tabs-list.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Tabs as TabsPrimitive } from "bits-ui";
 
 	type $$Props = TabsPrimitive.ListProps;
 
 	let className: $$Props["class"] = undefined;
 	export { className as class };
 </script>
 
 <TabsPrimitive.List
 	class={cn(
 		"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
 		className
 	)}
 	{...$$restProps}
 >
 	<slot />
 </TabsPrimitive.List>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/tabs/tabs-trigger.svelte [<script lang="ts">
 	import { cn } from "$lib/utils.js";
 	import { Tabs as TabsPrimitive } from "bits-ui";
 
 	type $$Props = TabsPrimitive.TriggerProps;
 	type $$Events = TabsPrimitive.TriggerEvents;
 
 	let className: $$Props["class"] = undefined;
 	export let value: $$Props["value"];
 	export { className as class };
 </script>
 
 <TabsPrimitive.Trigger
 	class={cn(
 		"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
 		className
 	)}
 	{value}
 	{...$$restProps}
 	on:click
 >
 	<slot />
 </TabsPrimitive.Trigger>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/textarea/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/textarea/textarea.svelte [<script lang="ts">
   import { cn } from "$lib/utils.js";
   import type { HTMLTextareaAttributes } from "svelte/elements";
   import type { TextareaEvents } from "./index.js";
 
   type $$Props = HTMLTextareaAttributes;
   type $$Events = TextareaEvents;
 
   let className: $$Props["class"] = undefined;
   export let value: $$Props["value"] = undefined;
   export { className as class };
 
   // Workaround for https://github.com/sveltejs/svelte/issues/9305
   // Fixed in Svelte 5, but not backported to 4.x.
   export let readonly: $$Props["readonly"] = undefined;
 
   export let textareacomponent;
 </script>
 
 <textarea
   class={cn(
     "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
     className
   )}
   bind:value
   bind:this={textareacomponent}
   {readonly}
   on:blur
   on:change
   on:click
   on:focus
   on:keydown
   on:keypress
   on:keyup
   on:mouseover
   on:mouseenter
   on:mouseleave
   on:paste
   on:input
   {...$$restProps}
 ></textarea>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/tooltip/index.ts []
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/tooltip/tooltip-content.svelte [<script lang="ts">
 	import { cn, flyAndScale } from "$lib/utils.js";
 	import { Tooltip as TooltipPrimitive } from "bits-ui";
 
 	type $$Props = TooltipPrimitive.ContentProps;
 
 	let className: $$Props["class"] = undefined;
 	export let sideOffset: $$Props["sideOffset"] = 4;
 	export let transition: $$Props["transition"] = flyAndScale;
 	export let transitionConfig: $$Props["transitionConfig"] = {
 		y: 8,
 		duration: 150,
 	};
 	export { className as class };
 </script>
 
 <TooltipPrimitive.Content
 	{transition}
 	{transitionConfig}
 	{sideOffset}
 	class={cn(
 		"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md",
 		className
 	)}
 	{...$$restProps}
 >
 	<slot />
 </TooltipPrimitive.Content>
]
/home/sanner/Coding/RAN/ran-app-native/src/components/ui/tracing-beam.tsx []
/home/sanner/Coding/RAN/ran-app-native/src/config/envconfig.ts []
/home/sanner/Coding/RAN/ran-app-native/src/config/platform.ts []
/home/sanner/Coding/RAN/ran-app-native/src/config/siteconfig.ts []
/home/sanner/Coding/RAN/ran-app-native/src/content/config.ts []
/home/sanner/Coding/RAN/ran-app-native/src/data/client/auth.ts []
/home/sanner/Coding/RAN/ran-app-native/src/data/client/constants.ts []
/home/sanner/Coding/RAN/ran-app-native/src/data/client/screen.ts []
/home/sanner/Coding/RAN/ran-app-native/src/data/client/stores.ts []
/home/sanner/Coding/RAN/ran-app-native/src/data/client/theme.ts []
/home/sanner/Coding/RAN/ran-app-native/src/data/client/user.ts []
/home/sanner/Coding/RAN/ran-app-native/src/data/datafunctions.ts []
/home/sanner/Coding/RAN/ran-app-native/src/data/db/backblaze.ts []
/home/sanner/Coding/RAN/ran-app-native/src/data/db/papersContent.ts []
/home/sanner/Coding/RAN/ran-app-native/src/data/db/randb.ts []
/home/sanner/Coding/RAN/ran-app-native/src/data/db/supabase.ts []
/home/sanner/Coding/RAN/ran-app-native/src/data/db/types/knex.d.ts []
/home/sanner/Coding/RAN/ran-app-native/src/data/db/usersessionCache.ts []
/home/sanner/Coding/RAN/ran-app-native/src/data/papers/arxivhtml.ts []
/home/sanner/Coding/RAN/ran-app-native/src/data/ui/nav.ts []
/home/sanner/Coding/RAN/ran-app-native/src/data/utils/user.ts []
/home/sanner/Coding/RAN/ran-app-native/src/env.d.ts [/// <reference path="../.astro/types.d.ts" />
 /// <reference types="astro/client" />
 /// <reference types="vite-plugin-pwa/info" />
 /// <reference types="vite-plugin-pwa/vanillajs" />
]
/home/sanner/Coding/RAN/ran-app-native/src/pages/account/forgot-password/_ForgotPassword.svelte [<script lang="ts">
   import * as Dialog from "$lib/components/ui/dialog/index.js";
   import ForgotPasswordDialog from "@components/AuthForms/ForgotPasswordDialog.svelte";
   import SignInSignUpDialog from "@components/AuthForms/SignInSignUpDialog.svelte";
 </script>
 
 <Dialog.Root open={true} closeOnEscape={false} closeOnOutsideClick={false}>
   <ForgotPasswordDialog showCloseButton={false} />
 </Dialog.Root>
]
/home/sanner/Coding/RAN/ran-app-native/src/pages/blog/[...slug]/index.png.ts []
/home/sanner/Coding/RAN/ran-app-native/src/pages/login/_Login.svelte [<script lang="ts">
   import * as Dialog from "$lib/components/ui/dialog/index.js";
   import SignInSignUpDialog from "@components/AuthForms/SignInSignUpDialog.svelte";
 </script>
 
 <Dialog.Root open={true} closeOnEscape={false} closeOnOutsideClick={false}>
   <SignInSignUpDialog showCloseButton={false} />
 </Dialog.Root>
]
/home/sanner/Coding/RAN/ran-app-native/src/pages/og.png.ts []
/home/sanner/Coding/RAN/ran-app-native/src/pages/pdf/[paper].ts []
/home/sanner/Coding/RAN/ran-app-native/src/pages/robots.txt.ts []
/home/sanner/Coding/RAN/ran-app-native/src/pages/rss.xml.ts []
/home/sanner/Coding/RAN/ran-app-native/src/pages/~api/test.ts []
/home/sanner/Coding/RAN/ran-app-native/src/pages/~api/user/profile_upload.ts []
/home/sanner/Coding/RAN/ran-app-native/src/pwa.ts []
/home/sanner/Coding/RAN/ran-app-native/src/tests/test.ts []
/home/sanner/Coding/RAN/ran-app-native/src/types/chat.ts []
/home/sanner/Coding/RAN/ran-app-native/src/types/comment.ts []
/home/sanner/Coding/RAN/ran-app-native/src/types/contentCollections.ts []
/home/sanner/Coding/RAN/ran-app-native/src/types/paper-types.ts []
/home/sanner/Coding/RAN/ran-app-native/src/types/ransettings.ts []
/home/sanner/Coding/RAN/ran-app-native/src/types/searchSuggestions.ts []
/home/sanner/Coding/RAN/ran-app-native/src/utils/actions/Clipboard/clipboard.ts []
/home/sanner/Coding/RAN/ran-app-native/src/utils/clickOutside.js []
/home/sanner/Coding/RAN/ran-app-native/src/utils/cn.ts []
/home/sanner/Coding/RAN/ran-app-native/src/utils/commonAlgorithms.ts []
/home/sanner/Coding/RAN/ran-app-native/src/utils/content/author.ts []
/home/sanner/Coding/RAN/ran-app-native/src/utils/content/helpers.ts []
/home/sanner/Coding/RAN/ran-app-native/src/utils/events/eventSystem.ts []
/home/sanner/Coding/RAN/ran-app-native/src/utils/events/keybindingSystem.ts []
/home/sanner/Coding/RAN/ran-app-native/src/utils/formatting.ts []
/home/sanner/Coding/RAN/ran-app-native/src/utils/isDesktop.ts []
/home/sanner/Coding/RAN/ran-app-native/src/utils/og/generateOgImages.tsx []
/home/sanner/Coding/RAN/ran-app-native/src/utils/og/og-templates/blogpost.tsx []
/home/sanner/Coding/RAN/ran-app-native/src/utils/og/og-templates/site.tsx []
/home/sanner/Coding/RAN/ran-app-native/src/utils/permissions/permissionsEnabled.ts []
/home/sanner/Coding/RAN/ran-app-native/src/utils.ts []
/home/sanner/Coding/RAN/ran-app-native/src/vite-env.d.ts []
